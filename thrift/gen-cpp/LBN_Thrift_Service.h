/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef LBN_Thrift_Service_H
#define LBN_Thrift_Service_H

#include <thrift/TDispatchProcessor.h>
#include "LBN_Thrift_types.h"

namespace LBN_Thrift {

class LBN_Thrift_ServiceIf {
 public:
  virtual ~LBN_Thrift_ServiceIf() {}
  virtual bool LBN_Thrift_Service_Init() = 0;
  virtual void LBN_Thrift_GetAreaList(std::vector<stLBN_Area> & _return) = 0;
  virtual void LBN_Thrift_GetModule(stLBN_Module& _return, const int32_t id) = 0;
  virtual void LBN_Thrift_GetModuleControlMax(stLBN_ModuleControl& _return) = 0;
  virtual void LBN_Thrift_SetModule(const int32_t moduleId, const stLBN_ModuleControl& control) = 0;
  virtual void LBN_Thrift_SetModules(const std::vector<int32_t> & moduleIdList, const stLBN_ModuleControl& control) = 0;
  virtual void LBN_Thrift_SetModuleMessage(const int32_t moduleId, const std::string& message) = 0;
  virtual void LBN_Thrift_SetSwitch(const int32_t switchId, const std::vector<stLBN_Module> & modules) = 0;
  virtual void LBN_Thrift_GetSwitches(std::vector<stLBN_Switch> & _return) = 0;
  virtual void LBN_Thrift_GetPowerMeter(stLBN_PowerMeter& _return) = 0;
  virtual void LBN_Thrift_GetPowerMeterOneDay(stLBN_PowerMeterOneDay& _return) = 0;
  virtual void LBN_Thrift_GetDisasterInfo(stLBN_DisasterInfo& _return) = 0;
  virtual void LBN_Thrift_GetAdminPassword(std::string& _return) = 0;
  virtual void LBN_Thrift_SetActive(const bool active) = 0;
  virtual bool LBN_Thrift_GetActive() = 0;
  virtual void LBN_Thrift_SetAuto(const bool automatic) = 0;
  virtual bool LBN_Thrift_GetAuto() = 0;
  virtual void LBN_Thrift_SetSimulate(const bool simulate) = 0;
  virtual void LBN_Thrift_GetSceneList(std::vector<stLBN_Scene> & _return) = 0;
  virtual int32_t LBN_Thrift_AddScene(const std::string& title) = 0;
  virtual void LBN_Thrift_ModifyScene(const stLBN_Scene& scene) = 0;
  virtual void LBN_Thrift_DeleteScene(const int32_t sceneId) = 0;
  virtual void LBN_Thrift_PreviewScene(const int32_t sceneId) = 0;
  virtual void LBN_Thrift_GetScheduleList(std::vector<stLBN_Schedule> & _return) = 0;
  virtual int32_t LBN_Thrift_AddSchedule(const stLBN_Scene& scene, const int64_t time, const bool repeatAll, const std::vector<bool> & repeatDays) = 0;
  virtual void LBN_Thrift_ModifySchedule(const stLBN_Schedule& schedule) = 0;
  virtual void LBN_Thrift_DeleteSchedule(const int32_t scheduleId) = 0;
  virtual void LBN_Thrift_GetContextRuleList(std::vector<stLBN_ContextRule> & _return) = 0;
  virtual void LBN_Thrift_ModifyContextRule(const stLBN_ContextRule& rule) = 0;
  virtual void LBN_Thrift_SetEnableContextRule(const int32_t contextId, const bool enable) = 0;
  virtual void LBN_Thrift_Simulate(const int64_t time) = 0;
  virtual void LBN_Thrift_GetSolarInfo(stLBN_SolarInfo& _return) = 0;
  virtual void LBN_Thrift_GetCharts(std::vector<stLBN_Chart> & _return) = 0;
  virtual void LBN_Thrift_GetParkingSensorList(std::vector<stLBN_ParkingSensor> & _return) = 0;
  virtual void LBN_Thrift_GetSchedulePresetList(std::vector<stLBN_SchedulePreset> & _return) = 0;
  virtual void LBN_Thrift_SetSchedulePreset(const int32_t presetId) = 0;
};

class LBN_Thrift_ServiceIfFactory {
 public:
  typedef LBN_Thrift_ServiceIf Handler;

  virtual ~LBN_Thrift_ServiceIfFactory() {}

  virtual LBN_Thrift_ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(LBN_Thrift_ServiceIf* /* handler */) = 0;
};

class LBN_Thrift_ServiceIfSingletonFactory : virtual public LBN_Thrift_ServiceIfFactory {
 public:
  LBN_Thrift_ServiceIfSingletonFactory(const boost::shared_ptr<LBN_Thrift_ServiceIf>& iface) : iface_(iface) {}
  virtual ~LBN_Thrift_ServiceIfSingletonFactory() {}

  virtual LBN_Thrift_ServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(LBN_Thrift_ServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<LBN_Thrift_ServiceIf> iface_;
};

class LBN_Thrift_ServiceNull : virtual public LBN_Thrift_ServiceIf {
 public:
  virtual ~LBN_Thrift_ServiceNull() {}
  bool LBN_Thrift_Service_Init() {
    bool _return = false;
    return _return;
  }
  void LBN_Thrift_GetAreaList(std::vector<stLBN_Area> & /* _return */) {
    return;
  }
  void LBN_Thrift_GetModule(stLBN_Module& /* _return */, const int32_t /* id */) {
    return;
  }
  void LBN_Thrift_GetModuleControlMax(stLBN_ModuleControl& /* _return */) {
    return;
  }
  void LBN_Thrift_SetModule(const int32_t /* moduleId */, const stLBN_ModuleControl& /* control */) {
    return;
  }
  void LBN_Thrift_SetModules(const std::vector<int32_t> & /* moduleIdList */, const stLBN_ModuleControl& /* control */) {
    return;
  }
  void LBN_Thrift_SetModuleMessage(const int32_t /* moduleId */, const std::string& /* message */) {
    return;
  }
  void LBN_Thrift_SetSwitch(const int32_t /* switchId */, const std::vector<stLBN_Module> & /* modules */) {
    return;
  }
  void LBN_Thrift_GetSwitches(std::vector<stLBN_Switch> & /* _return */) {
    return;
  }
  void LBN_Thrift_GetPowerMeter(stLBN_PowerMeter& /* _return */) {
    return;
  }
  void LBN_Thrift_GetPowerMeterOneDay(stLBN_PowerMeterOneDay& /* _return */) {
    return;
  }
  void LBN_Thrift_GetDisasterInfo(stLBN_DisasterInfo& /* _return */) {
    return;
  }
  void LBN_Thrift_GetAdminPassword(std::string& /* _return */) {
    return;
  }
  void LBN_Thrift_SetActive(const bool /* active */) {
    return;
  }
  bool LBN_Thrift_GetActive() {
    bool _return = false;
    return _return;
  }
  void LBN_Thrift_SetAuto(const bool /* automatic */) {
    return;
  }
  bool LBN_Thrift_GetAuto() {
    bool _return = false;
    return _return;
  }
  void LBN_Thrift_SetSimulate(const bool /* simulate */) {
    return;
  }
  void LBN_Thrift_GetSceneList(std::vector<stLBN_Scene> & /* _return */) {
    return;
  }
  int32_t LBN_Thrift_AddScene(const std::string& /* title */) {
    int32_t _return = 0;
    return _return;
  }
  void LBN_Thrift_ModifyScene(const stLBN_Scene& /* scene */) {
    return;
  }
  void LBN_Thrift_DeleteScene(const int32_t /* sceneId */) {
    return;
  }
  void LBN_Thrift_PreviewScene(const int32_t /* sceneId */) {
    return;
  }
  void LBN_Thrift_GetScheduleList(std::vector<stLBN_Schedule> & /* _return */) {
    return;
  }
  int32_t LBN_Thrift_AddSchedule(const stLBN_Scene& /* scene */, const int64_t /* time */, const bool /* repeatAll */, const std::vector<bool> & /* repeatDays */) {
    int32_t _return = 0;
    return _return;
  }
  void LBN_Thrift_ModifySchedule(const stLBN_Schedule& /* schedule */) {
    return;
  }
  void LBN_Thrift_DeleteSchedule(const int32_t /* scheduleId */) {
    return;
  }
  void LBN_Thrift_GetContextRuleList(std::vector<stLBN_ContextRule> & /* _return */) {
    return;
  }
  void LBN_Thrift_ModifyContextRule(const stLBN_ContextRule& /* rule */) {
    return;
  }
  void LBN_Thrift_SetEnableContextRule(const int32_t /* contextId */, const bool /* enable */) {
    return;
  }
  void LBN_Thrift_Simulate(const int64_t /* time */) {
    return;
  }
  void LBN_Thrift_GetSolarInfo(stLBN_SolarInfo& /* _return */) {
    return;
  }
  void LBN_Thrift_GetCharts(std::vector<stLBN_Chart> & /* _return */) {
    return;
  }
  void LBN_Thrift_GetParkingSensorList(std::vector<stLBN_ParkingSensor> & /* _return */) {
    return;
  }
  void LBN_Thrift_GetSchedulePresetList(std::vector<stLBN_SchedulePreset> & /* _return */) {
    return;
  }
  void LBN_Thrift_SetSchedulePreset(const int32_t /* presetId */) {
    return;
  }
};


class LBN_Thrift_Service_LBN_Thrift_Service_Init_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_Service_Init_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_Service_Init_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_Service_Init_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_Service_Init_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_Service_Init_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_Service_Init_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_Service_Init_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_Service_Init_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_Service_Init_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_Service_Init_result__isset;

class LBN_Thrift_Service_LBN_Thrift_Service_Init_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_Service_Init_result() : success(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_Service_Init_result() throw() {}

  bool success;

  _LBN_Thrift_Service_LBN_Thrift_Service_Init_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_Service_Init_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_Service_Init_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_Service_Init_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_Service_Init_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_Service_Init_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_Service_Init_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_Service_Init_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_Service_Init_presult() throw() {}

  bool* success;

  _LBN_Thrift_Service_LBN_Thrift_Service_Init_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetAreaList_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetAreaList_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAreaList_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetAreaList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetAreaList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetAreaList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetAreaList_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAreaList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetAreaList_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetAreaList_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetAreaList_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetAreaList_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetAreaList_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAreaList_result() throw() {}

  std::vector<stLBN_Area>  success;

  _LBN_Thrift_Service_LBN_Thrift_GetAreaList_result__isset __isset;

  void __set_success(const std::vector<stLBN_Area> & val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetAreaList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetAreaList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetAreaList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetAreaList_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetAreaList_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetAreaList_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetAreaList_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAreaList_presult() throw() {}

  std::vector<stLBN_Area> * success;

  _LBN_Thrift_Service_LBN_Thrift_GetAreaList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetModule_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetModule_args__isset() : id(false) {}
  bool id;
} _LBN_Thrift_Service_LBN_Thrift_GetModule_args__isset;

class LBN_Thrift_Service_LBN_Thrift_GetModule_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetModule_args() : id(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetModule_args() throw() {}

  int32_t id;

  _LBN_Thrift_Service_LBN_Thrift_GetModule_args__isset __isset;

  void __set_id(const int32_t val) {
    id = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetModule_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetModule_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetModule_pargs() throw() {}

  const int32_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetModule_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetModule_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetModule_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetModule_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetModule_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetModule_result() throw() {}

  stLBN_Module success;

  _LBN_Thrift_Service_LBN_Thrift_GetModule_result__isset __isset;

  void __set_success(const stLBN_Module& val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetModule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetModule_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetModule_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetModule_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetModule_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetModule_presult() throw() {}

  stLBN_Module* success;

  _LBN_Thrift_Service_LBN_Thrift_GetModule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_result() throw() {}

  stLBN_ModuleControl success;

  _LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_result__isset __isset;

  void __set_success(const stLBN_ModuleControl& val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_presult() throw() {}

  stLBN_ModuleControl* success;

  _LBN_Thrift_Service_LBN_Thrift_GetModuleControlMax_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_SetModule_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_SetModule_args__isset() : moduleId(false), control(false) {}
  bool moduleId;
  bool control;
} _LBN_Thrift_Service_LBN_Thrift_SetModule_args__isset;

class LBN_Thrift_Service_LBN_Thrift_SetModule_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetModule_args() : moduleId(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModule_args() throw() {}

  int32_t moduleId;
  stLBN_ModuleControl control;

  _LBN_Thrift_Service_LBN_Thrift_SetModule_args__isset __isset;

  void __set_moduleId(const int32_t val) {
    moduleId = val;
  }

  void __set_control(const stLBN_ModuleControl& val) {
    control = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetModule_args & rhs) const
  {
    if (!(moduleId == rhs.moduleId))
      return false;
    if (!(control == rhs.control))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetModule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetModule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetModule_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModule_pargs() throw() {}

  const int32_t* moduleId;
  const stLBN_ModuleControl* control;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetModule_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetModule_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModule_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetModule_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetModule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetModule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetModule_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModule_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_SetModules_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_SetModules_args__isset() : moduleIdList(false), control(false) {}
  bool moduleIdList;
  bool control;
} _LBN_Thrift_Service_LBN_Thrift_SetModules_args__isset;

class LBN_Thrift_Service_LBN_Thrift_SetModules_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetModules_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModules_args() throw() {}

  std::vector<int32_t>  moduleIdList;
  stLBN_ModuleControl control;

  _LBN_Thrift_Service_LBN_Thrift_SetModules_args__isset __isset;

  void __set_moduleIdList(const std::vector<int32_t> & val) {
    moduleIdList = val;
  }

  void __set_control(const stLBN_ModuleControl& val) {
    control = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetModules_args & rhs) const
  {
    if (!(moduleIdList == rhs.moduleIdList))
      return false;
    if (!(control == rhs.control))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetModules_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetModules_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetModules_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModules_pargs() throw() {}

  const std::vector<int32_t> * moduleIdList;
  const stLBN_ModuleControl* control;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetModules_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetModules_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModules_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetModules_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetModules_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetModules_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetModules_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModules_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_args__isset() : moduleId(false), message(false) {}
  bool moduleId;
  bool message;
} _LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_args__isset;

class LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_args() : moduleId(0), message() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_args() throw() {}

  int32_t moduleId;
  std::string message;

  _LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_args__isset __isset;

  void __set_moduleId(const int32_t val) {
    moduleId = val;
  }

  void __set_message(const std::string& val) {
    message = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_args & rhs) const
  {
    if (!(moduleId == rhs.moduleId))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_pargs() throw() {}

  const int32_t* moduleId;
  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetModuleMessage_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_SetSwitch_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_SetSwitch_args__isset() : switchId(false), modules(false) {}
  bool switchId;
  bool modules;
} _LBN_Thrift_Service_LBN_Thrift_SetSwitch_args__isset;

class LBN_Thrift_Service_LBN_Thrift_SetSwitch_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetSwitch_args() : switchId(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSwitch_args() throw() {}

  int32_t switchId;
  std::vector<stLBN_Module>  modules;

  _LBN_Thrift_Service_LBN_Thrift_SetSwitch_args__isset __isset;

  void __set_switchId(const int32_t val) {
    switchId = val;
  }

  void __set_modules(const std::vector<stLBN_Module> & val) {
    modules = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetSwitch_args & rhs) const
  {
    if (!(switchId == rhs.switchId))
      return false;
    if (!(modules == rhs.modules))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetSwitch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetSwitch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetSwitch_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSwitch_pargs() throw() {}

  const int32_t* switchId;
  const std::vector<stLBN_Module> * modules;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetSwitch_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetSwitch_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSwitch_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetSwitch_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetSwitch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetSwitch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetSwitch_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSwitch_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetSwitches_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetSwitches_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSwitches_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetSwitches_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetSwitches_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetSwitches_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetSwitches_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSwitches_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetSwitches_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetSwitches_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetSwitches_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetSwitches_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetSwitches_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSwitches_result() throw() {}

  std::vector<stLBN_Switch>  success;

  _LBN_Thrift_Service_LBN_Thrift_GetSwitches_result__isset __isset;

  void __set_success(const std::vector<stLBN_Switch> & val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetSwitches_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetSwitches_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetSwitches_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetSwitches_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetSwitches_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetSwitches_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetSwitches_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSwitches_presult() throw() {}

  std::vector<stLBN_Switch> * success;

  _LBN_Thrift_Service_LBN_Thrift_GetSwitches_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_result() throw() {}

  stLBN_PowerMeter success;

  _LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_result__isset __isset;

  void __set_success(const stLBN_PowerMeter& val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_presult() throw() {}

  stLBN_PowerMeter* success;

  _LBN_Thrift_Service_LBN_Thrift_GetPowerMeter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_result() throw() {}

  stLBN_PowerMeterOneDay success;

  _LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_result__isset __isset;

  void __set_success(const stLBN_PowerMeterOneDay& val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_presult() throw() {}

  stLBN_PowerMeterOneDay* success;

  _LBN_Thrift_Service_LBN_Thrift_GetPowerMeterOneDay_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_result() throw() {}

  stLBN_DisasterInfo success;

  _LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_result__isset __isset;

  void __set_success(const stLBN_DisasterInfo& val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_presult() throw() {}

  stLBN_DisasterInfo* success;

  _LBN_Thrift_Service_LBN_Thrift_GetDisasterInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_result() : success() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_result() throw() {}

  std::string success;

  _LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_presult() throw() {}

  std::string* success;

  _LBN_Thrift_Service_LBN_Thrift_GetAdminPassword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_SetActive_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_SetActive_args__isset() : active(false) {}
  bool active;
} _LBN_Thrift_Service_LBN_Thrift_SetActive_args__isset;

class LBN_Thrift_Service_LBN_Thrift_SetActive_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetActive_args() : active(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetActive_args() throw() {}

  bool active;

  _LBN_Thrift_Service_LBN_Thrift_SetActive_args__isset __isset;

  void __set_active(const bool val) {
    active = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetActive_args & rhs) const
  {
    if (!(active == rhs.active))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetActive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetActive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetActive_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetActive_pargs() throw() {}

  const bool* active;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetActive_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetActive_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetActive_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetActive_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetActive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetActive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetActive_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetActive_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetActive_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetActive_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetActive_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetActive_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetActive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetActive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetActive_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetActive_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetActive_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetActive_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetActive_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetActive_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetActive_result() : success(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetActive_result() throw() {}

  bool success;

  _LBN_Thrift_Service_LBN_Thrift_GetActive_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetActive_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetActive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetActive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetActive_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetActive_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetActive_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetActive_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetActive_presult() throw() {}

  bool* success;

  _LBN_Thrift_Service_LBN_Thrift_GetActive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_SetAuto_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_SetAuto_args__isset() : automatic(false) {}
  bool automatic;
} _LBN_Thrift_Service_LBN_Thrift_SetAuto_args__isset;

class LBN_Thrift_Service_LBN_Thrift_SetAuto_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetAuto_args() : automatic(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetAuto_args() throw() {}

  bool automatic;

  _LBN_Thrift_Service_LBN_Thrift_SetAuto_args__isset __isset;

  void __set_automatic(const bool val) {
    automatic = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetAuto_args & rhs) const
  {
    if (!(automatic == rhs.automatic))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetAuto_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetAuto_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetAuto_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetAuto_pargs() throw() {}

  const bool* automatic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetAuto_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetAuto_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetAuto_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetAuto_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetAuto_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetAuto_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetAuto_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetAuto_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetAuto_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetAuto_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAuto_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetAuto_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetAuto_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetAuto_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetAuto_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAuto_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetAuto_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetAuto_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetAuto_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetAuto_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetAuto_result() : success(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAuto_result() throw() {}

  bool success;

  _LBN_Thrift_Service_LBN_Thrift_GetAuto_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetAuto_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetAuto_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetAuto_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetAuto_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetAuto_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetAuto_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetAuto_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetAuto_presult() throw() {}

  bool* success;

  _LBN_Thrift_Service_LBN_Thrift_GetAuto_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_SetSimulate_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_SetSimulate_args__isset() : simulate(false) {}
  bool simulate;
} _LBN_Thrift_Service_LBN_Thrift_SetSimulate_args__isset;

class LBN_Thrift_Service_LBN_Thrift_SetSimulate_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetSimulate_args() : simulate(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSimulate_args() throw() {}

  bool simulate;

  _LBN_Thrift_Service_LBN_Thrift_SetSimulate_args__isset __isset;

  void __set_simulate(const bool val) {
    simulate = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetSimulate_args & rhs) const
  {
    if (!(simulate == rhs.simulate))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetSimulate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetSimulate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetSimulate_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSimulate_pargs() throw() {}

  const bool* simulate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetSimulate_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetSimulate_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSimulate_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetSimulate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetSimulate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetSimulate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetSimulate_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSimulate_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetSceneList_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetSceneList_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSceneList_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetSceneList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetSceneList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetSceneList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetSceneList_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSceneList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetSceneList_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetSceneList_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetSceneList_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetSceneList_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetSceneList_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSceneList_result() throw() {}

  std::vector<stLBN_Scene>  success;

  _LBN_Thrift_Service_LBN_Thrift_GetSceneList_result__isset __isset;

  void __set_success(const std::vector<stLBN_Scene> & val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetSceneList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetSceneList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetSceneList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetSceneList_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetSceneList_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetSceneList_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetSceneList_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSceneList_presult() throw() {}

  std::vector<stLBN_Scene> * success;

  _LBN_Thrift_Service_LBN_Thrift_GetSceneList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_AddScene_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_AddScene_args__isset() : title(false) {}
  bool title;
} _LBN_Thrift_Service_LBN_Thrift_AddScene_args__isset;

class LBN_Thrift_Service_LBN_Thrift_AddScene_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_AddScene_args() : title() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_AddScene_args() throw() {}

  std::string title;

  _LBN_Thrift_Service_LBN_Thrift_AddScene_args__isset __isset;

  void __set_title(const std::string& val) {
    title = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_AddScene_args & rhs) const
  {
    if (!(title == rhs.title))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_AddScene_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_AddScene_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_AddScene_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_AddScene_pargs() throw() {}

  const std::string* title;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_AddScene_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_AddScene_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_AddScene_result__isset;

class LBN_Thrift_Service_LBN_Thrift_AddScene_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_AddScene_result() : success(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_AddScene_result() throw() {}

  int32_t success;

  _LBN_Thrift_Service_LBN_Thrift_AddScene_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_AddScene_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_AddScene_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_AddScene_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_AddScene_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_AddScene_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_AddScene_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_AddScene_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_AddScene_presult() throw() {}

  int32_t* success;

  _LBN_Thrift_Service_LBN_Thrift_AddScene_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_ModifyScene_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_ModifyScene_args__isset() : scene(false) {}
  bool scene;
} _LBN_Thrift_Service_LBN_Thrift_ModifyScene_args__isset;

class LBN_Thrift_Service_LBN_Thrift_ModifyScene_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_ModifyScene_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifyScene_args() throw() {}

  stLBN_Scene scene;

  _LBN_Thrift_Service_LBN_Thrift_ModifyScene_args__isset __isset;

  void __set_scene(const stLBN_Scene& val) {
    scene = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_ModifyScene_args & rhs) const
  {
    if (!(scene == rhs.scene))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_ModifyScene_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_ModifyScene_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_ModifyScene_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifyScene_pargs() throw() {}

  const stLBN_Scene* scene;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_ModifyScene_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_ModifyScene_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifyScene_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_ModifyScene_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_ModifyScene_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_ModifyScene_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_ModifyScene_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifyScene_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_DeleteScene_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_DeleteScene_args__isset() : sceneId(false) {}
  bool sceneId;
} _LBN_Thrift_Service_LBN_Thrift_DeleteScene_args__isset;

class LBN_Thrift_Service_LBN_Thrift_DeleteScene_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_DeleteScene_args() : sceneId(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_DeleteScene_args() throw() {}

  int32_t sceneId;

  _LBN_Thrift_Service_LBN_Thrift_DeleteScene_args__isset __isset;

  void __set_sceneId(const int32_t val) {
    sceneId = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_DeleteScene_args & rhs) const
  {
    if (!(sceneId == rhs.sceneId))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_DeleteScene_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_DeleteScene_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_DeleteScene_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_DeleteScene_pargs() throw() {}

  const int32_t* sceneId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_DeleteScene_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_DeleteScene_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_DeleteScene_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_DeleteScene_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_DeleteScene_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_DeleteScene_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_DeleteScene_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_DeleteScene_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_PreviewScene_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_PreviewScene_args__isset() : sceneId(false) {}
  bool sceneId;
} _LBN_Thrift_Service_LBN_Thrift_PreviewScene_args__isset;

class LBN_Thrift_Service_LBN_Thrift_PreviewScene_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_PreviewScene_args() : sceneId(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_PreviewScene_args() throw() {}

  int32_t sceneId;

  _LBN_Thrift_Service_LBN_Thrift_PreviewScene_args__isset __isset;

  void __set_sceneId(const int32_t val) {
    sceneId = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_PreviewScene_args & rhs) const
  {
    if (!(sceneId == rhs.sceneId))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_PreviewScene_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_PreviewScene_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_PreviewScene_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_PreviewScene_pargs() throw() {}

  const int32_t* sceneId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_PreviewScene_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_PreviewScene_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_PreviewScene_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_PreviewScene_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_PreviewScene_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_PreviewScene_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_PreviewScene_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_PreviewScene_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetScheduleList_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetScheduleList_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetScheduleList_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetScheduleList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetScheduleList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetScheduleList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetScheduleList_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetScheduleList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetScheduleList_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetScheduleList_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetScheduleList_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetScheduleList_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetScheduleList_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetScheduleList_result() throw() {}

  std::vector<stLBN_Schedule>  success;

  _LBN_Thrift_Service_LBN_Thrift_GetScheduleList_result__isset __isset;

  void __set_success(const std::vector<stLBN_Schedule> & val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetScheduleList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetScheduleList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetScheduleList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetScheduleList_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetScheduleList_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetScheduleList_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetScheduleList_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetScheduleList_presult() throw() {}

  std::vector<stLBN_Schedule> * success;

  _LBN_Thrift_Service_LBN_Thrift_GetScheduleList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_AddSchedule_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_AddSchedule_args__isset() : scene(false), time(false), repeatAll(false), repeatDays(false) {}
  bool scene;
  bool time;
  bool repeatAll;
  bool repeatDays;
} _LBN_Thrift_Service_LBN_Thrift_AddSchedule_args__isset;

class LBN_Thrift_Service_LBN_Thrift_AddSchedule_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_AddSchedule_args() : time(0), repeatAll(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_AddSchedule_args() throw() {}

  stLBN_Scene scene;
  int64_t time;
  bool repeatAll;
  std::vector<bool>  repeatDays;

  _LBN_Thrift_Service_LBN_Thrift_AddSchedule_args__isset __isset;

  void __set_scene(const stLBN_Scene& val) {
    scene = val;
  }

  void __set_time(const int64_t val) {
    time = val;
  }

  void __set_repeatAll(const bool val) {
    repeatAll = val;
  }

  void __set_repeatDays(const std::vector<bool> & val) {
    repeatDays = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_AddSchedule_args & rhs) const
  {
    if (!(scene == rhs.scene))
      return false;
    if (!(time == rhs.time))
      return false;
    if (!(repeatAll == rhs.repeatAll))
      return false;
    if (!(repeatDays == rhs.repeatDays))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_AddSchedule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_AddSchedule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_AddSchedule_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_AddSchedule_pargs() throw() {}

  const stLBN_Scene* scene;
  const int64_t* time;
  const bool* repeatAll;
  const std::vector<bool> * repeatDays;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_AddSchedule_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_AddSchedule_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_AddSchedule_result__isset;

class LBN_Thrift_Service_LBN_Thrift_AddSchedule_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_AddSchedule_result() : success(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_AddSchedule_result() throw() {}

  int32_t success;

  _LBN_Thrift_Service_LBN_Thrift_AddSchedule_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_AddSchedule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_AddSchedule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_AddSchedule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_AddSchedule_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_AddSchedule_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_AddSchedule_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_AddSchedule_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_AddSchedule_presult() throw() {}

  int32_t* success;

  _LBN_Thrift_Service_LBN_Thrift_AddSchedule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_ModifySchedule_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_ModifySchedule_args__isset() : schedule(false) {}
  bool schedule;
} _LBN_Thrift_Service_LBN_Thrift_ModifySchedule_args__isset;

class LBN_Thrift_Service_LBN_Thrift_ModifySchedule_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_ModifySchedule_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifySchedule_args() throw() {}

  stLBN_Schedule schedule;

  _LBN_Thrift_Service_LBN_Thrift_ModifySchedule_args__isset __isset;

  void __set_schedule(const stLBN_Schedule& val) {
    schedule = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_ModifySchedule_args & rhs) const
  {
    if (!(schedule == rhs.schedule))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_ModifySchedule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_ModifySchedule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_ModifySchedule_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifySchedule_pargs() throw() {}

  const stLBN_Schedule* schedule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_ModifySchedule_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_ModifySchedule_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifySchedule_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_ModifySchedule_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_ModifySchedule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_ModifySchedule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_ModifySchedule_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifySchedule_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_args__isset() : scheduleId(false) {}
  bool scheduleId;
} _LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_args__isset;

class LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_args() : scheduleId(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_args() throw() {}

  int32_t scheduleId;

  _LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_args__isset __isset;

  void __set_scheduleId(const int32_t val) {
    scheduleId = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_args & rhs) const
  {
    if (!(scheduleId == rhs.scheduleId))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_pargs() throw() {}

  const int32_t* scheduleId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_DeleteSchedule_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_result() throw() {}

  std::vector<stLBN_ContextRule>  success;

  _LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_result__isset __isset;

  void __set_success(const std::vector<stLBN_ContextRule> & val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_presult() throw() {}

  std::vector<stLBN_ContextRule> * success;

  _LBN_Thrift_Service_LBN_Thrift_GetContextRuleList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_args__isset() : rule(false) {}
  bool rule;
} _LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_args__isset;

class LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_args() throw() {}

  stLBN_ContextRule rule;

  _LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_args__isset __isset;

  void __set_rule(const stLBN_ContextRule& val) {
    rule = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_args & rhs) const
  {
    if (!(rule == rhs.rule))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_pargs() throw() {}

  const stLBN_ContextRule* rule;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_ModifyContextRule_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_args__isset() : contextId(false), enable(false) {}
  bool contextId;
  bool enable;
} _LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_args__isset;

class LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_args() : contextId(0), enable(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_args() throw() {}

  int32_t contextId;
  bool enable;

  _LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_args__isset __isset;

  void __set_contextId(const int32_t val) {
    contextId = val;
  }

  void __set_enable(const bool val) {
    enable = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_args & rhs) const
  {
    if (!(contextId == rhs.contextId))
      return false;
    if (!(enable == rhs.enable))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_pargs() throw() {}

  const int32_t* contextId;
  const bool* enable;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetEnableContextRule_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_Simulate_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_Simulate_args__isset() : time(false) {}
  bool time;
} _LBN_Thrift_Service_LBN_Thrift_Simulate_args__isset;

class LBN_Thrift_Service_LBN_Thrift_Simulate_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_Simulate_args() : time(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_Simulate_args() throw() {}

  int64_t time;

  _LBN_Thrift_Service_LBN_Thrift_Simulate_args__isset __isset;

  void __set_time(const int64_t val) {
    time = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_Simulate_args & rhs) const
  {
    if (!(time == rhs.time))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_Simulate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_Simulate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_Simulate_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_Simulate_pargs() throw() {}

  const int64_t* time;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_Simulate_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_Simulate_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_Simulate_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_Simulate_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_Simulate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_Simulate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_Simulate_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_Simulate_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_result() throw() {}

  stLBN_SolarInfo success;

  _LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_result__isset __isset;

  void __set_success(const stLBN_SolarInfo& val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_presult() throw() {}

  stLBN_SolarInfo* success;

  _LBN_Thrift_Service_LBN_Thrift_GetSolarInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetCharts_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetCharts_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetCharts_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetCharts_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetCharts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetCharts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetCharts_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetCharts_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetCharts_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetCharts_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetCharts_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetCharts_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetCharts_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetCharts_result() throw() {}

  std::vector<stLBN_Chart>  success;

  _LBN_Thrift_Service_LBN_Thrift_GetCharts_result__isset __isset;

  void __set_success(const std::vector<stLBN_Chart> & val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetCharts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetCharts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetCharts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetCharts_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetCharts_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetCharts_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetCharts_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetCharts_presult() throw() {}

  std::vector<stLBN_Chart> * success;

  _LBN_Thrift_Service_LBN_Thrift_GetCharts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_result() throw() {}

  std::vector<stLBN_ParkingSensor>  success;

  _LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_result__isset __isset;

  void __set_success(const std::vector<stLBN_ParkingSensor> & val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_presult() throw() {}

  std::vector<stLBN_ParkingSensor> * success;

  _LBN_Thrift_Service_LBN_Thrift_GetParkingSensorList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_args() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_args() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_result__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_result__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_result__isset;

class LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_result() throw() {}

  std::vector<stLBN_SchedulePreset>  success;

  _LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_result__isset __isset;

  void __set_success(const std::vector<stLBN_SchedulePreset> & val) {
    success = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_presult__isset {
  _LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_presult__isset() : success(false) {}
  bool success;
} _LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_presult__isset;

class LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_presult() throw() {}

  std::vector<stLBN_SchedulePreset> * success;

  _LBN_Thrift_Service_LBN_Thrift_GetSchedulePresetList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_args__isset {
  _LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_args__isset() : presetId(false) {}
  bool presetId;
} _LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_args__isset;

class LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_args {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_args() : presetId(0) {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_args() throw() {}

  int32_t presetId;

  _LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_args__isset __isset;

  void __set_presetId(const int32_t val) {
    presetId = val;
  }

  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_args & rhs) const
  {
    if (!(presetId == rhs.presetId))
      return false;
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_pargs {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_pargs() throw() {}

  const int32_t* presetId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_result {
 public:

  LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_result() {
  }

  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_result() throw() {}


  bool operator == (const LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_presult {
 public:


  virtual ~LBN_Thrift_Service_LBN_Thrift_SetSchedulePreset_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class LBN_Thrift_ServiceClient : virtual public LBN_Thrift_ServiceIf {
 public:
  LBN_Thrift_ServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  LBN_Thrift_ServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool LBN_Thrift_Service_Init();
  void send_LBN_Thrift_Service_Init();
  bool recv_LBN_Thrift_Service_Init();
  void LBN_Thrift_GetAreaList(std::vector<stLBN_Area> & _return);
  void send_LBN_Thrift_GetAreaList();
  void recv_LBN_Thrift_GetAreaList(std::vector<stLBN_Area> & _return);
  void LBN_Thrift_GetModule(stLBN_Module& _return, const int32_t id);
  void send_LBN_Thrift_GetModule(const int32_t id);
  void recv_LBN_Thrift_GetModule(stLBN_Module& _return);
  void LBN_Thrift_GetModuleControlMax(stLBN_ModuleControl& _return);
  void send_LBN_Thrift_GetModuleControlMax();
  void recv_LBN_Thrift_GetModuleControlMax(stLBN_ModuleControl& _return);
  void LBN_Thrift_SetModule(const int32_t moduleId, const stLBN_ModuleControl& control);
  void send_LBN_Thrift_SetModule(const int32_t moduleId, const stLBN_ModuleControl& control);
  void recv_LBN_Thrift_SetModule();
  void LBN_Thrift_SetModules(const std::vector<int32_t> & moduleIdList, const stLBN_ModuleControl& control);
  void send_LBN_Thrift_SetModules(const std::vector<int32_t> & moduleIdList, const stLBN_ModuleControl& control);
  void recv_LBN_Thrift_SetModules();
  void LBN_Thrift_SetModuleMessage(const int32_t moduleId, const std::string& message);
  void send_LBN_Thrift_SetModuleMessage(const int32_t moduleId, const std::string& message);
  void recv_LBN_Thrift_SetModuleMessage();
  void LBN_Thrift_SetSwitch(const int32_t switchId, const std::vector<stLBN_Module> & modules);
  void send_LBN_Thrift_SetSwitch(const int32_t switchId, const std::vector<stLBN_Module> & modules);
  void recv_LBN_Thrift_SetSwitch();
  void LBN_Thrift_GetSwitches(std::vector<stLBN_Switch> & _return);
  void send_LBN_Thrift_GetSwitches();
  void recv_LBN_Thrift_GetSwitches(std::vector<stLBN_Switch> & _return);
  void LBN_Thrift_GetPowerMeter(stLBN_PowerMeter& _return);
  void send_LBN_Thrift_GetPowerMeter();
  void recv_LBN_Thrift_GetPowerMeter(stLBN_PowerMeter& _return);
  void LBN_Thrift_GetPowerMeterOneDay(stLBN_PowerMeterOneDay& _return);
  void send_LBN_Thrift_GetPowerMeterOneDay();
  void recv_LBN_Thrift_GetPowerMeterOneDay(stLBN_PowerMeterOneDay& _return);
  void LBN_Thrift_GetDisasterInfo(stLBN_DisasterInfo& _return);
  void send_LBN_Thrift_GetDisasterInfo();
  void recv_LBN_Thrift_GetDisasterInfo(stLBN_DisasterInfo& _return);
  void LBN_Thrift_GetAdminPassword(std::string& _return);
  void send_LBN_Thrift_GetAdminPassword();
  void recv_LBN_Thrift_GetAdminPassword(std::string& _return);
  void LBN_Thrift_SetActive(const bool active);
  void send_LBN_Thrift_SetActive(const bool active);
  void recv_LBN_Thrift_SetActive();
  bool LBN_Thrift_GetActive();
  void send_LBN_Thrift_GetActive();
  bool recv_LBN_Thrift_GetActive();
  void LBN_Thrift_SetAuto(const bool automatic);
  void send_LBN_Thrift_SetAuto(const bool automatic);
  void recv_LBN_Thrift_SetAuto();
  bool LBN_Thrift_GetAuto();
  void send_LBN_Thrift_GetAuto();
  bool recv_LBN_Thrift_GetAuto();
  void LBN_Thrift_SetSimulate(const bool simulate);
  void send_LBN_Thrift_SetSimulate(const bool simulate);
  void recv_LBN_Thrift_SetSimulate();
  void LBN_Thrift_GetSceneList(std::vector<stLBN_Scene> & _return);
  void send_LBN_Thrift_GetSceneList();
  void recv_LBN_Thrift_GetSceneList(std::vector<stLBN_Scene> & _return);
  int32_t LBN_Thrift_AddScene(const std::string& title);
  void send_LBN_Thrift_AddScene(const std::string& title);
  int32_t recv_LBN_Thrift_AddScene();
  void LBN_Thrift_ModifyScene(const stLBN_Scene& scene);
  void send_LBN_Thrift_ModifyScene(const stLBN_Scene& scene);
  void recv_LBN_Thrift_ModifyScene();
  void LBN_Thrift_DeleteScene(const int32_t sceneId);
  void send_LBN_Thrift_DeleteScene(const int32_t sceneId);
  void recv_LBN_Thrift_DeleteScene();
  void LBN_Thrift_PreviewScene(const int32_t sceneId);
  void send_LBN_Thrift_PreviewScene(const int32_t sceneId);
  void recv_LBN_Thrift_PreviewScene();
  void LBN_Thrift_GetScheduleList(std::vector<stLBN_Schedule> & _return);
  void send_LBN_Thrift_GetScheduleList();
  void recv_LBN_Thrift_GetScheduleList(std::vector<stLBN_Schedule> & _return);
  int32_t LBN_Thrift_AddSchedule(const stLBN_Scene& scene, const int64_t time, const bool repeatAll, const std::vector<bool> & repeatDays);
  void send_LBN_Thrift_AddSchedule(const stLBN_Scene& scene, const int64_t time, const bool repeatAll, const std::vector<bool> & repeatDays);
  int32_t recv_LBN_Thrift_AddSchedule();
  void LBN_Thrift_ModifySchedule(const stLBN_Schedule& schedule);
  void send_LBN_Thrift_ModifySchedule(const stLBN_Schedule& schedule);
  void recv_LBN_Thrift_ModifySchedule();
  void LBN_Thrift_DeleteSchedule(const int32_t scheduleId);
  void send_LBN_Thrift_DeleteSchedule(const int32_t scheduleId);
  void recv_LBN_Thrift_DeleteSchedule();
  void LBN_Thrift_GetContextRuleList(std::vector<stLBN_ContextRule> & _return);
  void send_LBN_Thrift_GetContextRuleList();
  void recv_LBN_Thrift_GetContextRuleList(std::vector<stLBN_ContextRule> & _return);
  void LBN_Thrift_ModifyContextRule(const stLBN_ContextRule& rule);
  void send_LBN_Thrift_ModifyContextRule(const stLBN_ContextRule& rule);
  void recv_LBN_Thrift_ModifyContextRule();
  void LBN_Thrift_SetEnableContextRule(const int32_t contextId, const bool enable);
  void send_LBN_Thrift_SetEnableContextRule(const int32_t contextId, const bool enable);
  void recv_LBN_Thrift_SetEnableContextRule();
  void LBN_Thrift_Simulate(const int64_t time);
  void send_LBN_Thrift_Simulate(const int64_t time);
  void recv_LBN_Thrift_Simulate();
  void LBN_Thrift_GetSolarInfo(stLBN_SolarInfo& _return);
  void send_LBN_Thrift_GetSolarInfo();
  void recv_LBN_Thrift_GetSolarInfo(stLBN_SolarInfo& _return);
  void LBN_Thrift_GetCharts(std::vector<stLBN_Chart> & _return);
  void send_LBN_Thrift_GetCharts();
  void recv_LBN_Thrift_GetCharts(std::vector<stLBN_Chart> & _return);
  void LBN_Thrift_GetParkingSensorList(std::vector<stLBN_ParkingSensor> & _return);
  void send_LBN_Thrift_GetParkingSensorList();
  void recv_LBN_Thrift_GetParkingSensorList(std::vector<stLBN_ParkingSensor> & _return);
  void LBN_Thrift_GetSchedulePresetList(std::vector<stLBN_SchedulePreset> & _return);
  void send_LBN_Thrift_GetSchedulePresetList();
  void recv_LBN_Thrift_GetSchedulePresetList(std::vector<stLBN_SchedulePreset> & _return);
  void LBN_Thrift_SetSchedulePreset(const int32_t presetId);
  void send_LBN_Thrift_SetSchedulePreset(const int32_t presetId);
  void recv_LBN_Thrift_SetSchedulePreset();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class LBN_Thrift_ServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<LBN_Thrift_ServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (LBN_Thrift_ServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_LBN_Thrift_Service_Init(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetAreaList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetModuleControlMax(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_SetModule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_SetModules(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_SetModuleMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_SetSwitch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetSwitches(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetPowerMeter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetPowerMeterOneDay(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetDisasterInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetAdminPassword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_SetActive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetActive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_SetAuto(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetAuto(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_SetSimulate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetSceneList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_AddScene(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_ModifyScene(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_DeleteScene(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_PreviewScene(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetScheduleList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_AddSchedule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_ModifySchedule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_DeleteSchedule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetContextRuleList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_ModifyContextRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_SetEnableContextRule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_Simulate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetSolarInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetCharts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetParkingSensorList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_GetSchedulePresetList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_LBN_Thrift_SetSchedulePreset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  LBN_Thrift_ServiceProcessor(boost::shared_ptr<LBN_Thrift_ServiceIf> iface) :
    iface_(iface) {
    processMap_["LBN_Thrift_Service_Init"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_Service_Init;
    processMap_["LBN_Thrift_GetAreaList"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetAreaList;
    processMap_["LBN_Thrift_GetModule"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetModule;
    processMap_["LBN_Thrift_GetModuleControlMax"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetModuleControlMax;
    processMap_["LBN_Thrift_SetModule"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_SetModule;
    processMap_["LBN_Thrift_SetModules"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_SetModules;
    processMap_["LBN_Thrift_SetModuleMessage"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_SetModuleMessage;
    processMap_["LBN_Thrift_SetSwitch"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_SetSwitch;
    processMap_["LBN_Thrift_GetSwitches"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetSwitches;
    processMap_["LBN_Thrift_GetPowerMeter"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetPowerMeter;
    processMap_["LBN_Thrift_GetPowerMeterOneDay"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetPowerMeterOneDay;
    processMap_["LBN_Thrift_GetDisasterInfo"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetDisasterInfo;
    processMap_["LBN_Thrift_GetAdminPassword"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetAdminPassword;
    processMap_["LBN_Thrift_SetActive"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_SetActive;
    processMap_["LBN_Thrift_GetActive"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetActive;
    processMap_["LBN_Thrift_SetAuto"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_SetAuto;
    processMap_["LBN_Thrift_GetAuto"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetAuto;
    processMap_["LBN_Thrift_SetSimulate"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_SetSimulate;
    processMap_["LBN_Thrift_GetSceneList"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetSceneList;
    processMap_["LBN_Thrift_AddScene"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_AddScene;
    processMap_["LBN_Thrift_ModifyScene"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_ModifyScene;
    processMap_["LBN_Thrift_DeleteScene"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_DeleteScene;
    processMap_["LBN_Thrift_PreviewScene"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_PreviewScene;
    processMap_["LBN_Thrift_GetScheduleList"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetScheduleList;
    processMap_["LBN_Thrift_AddSchedule"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_AddSchedule;
    processMap_["LBN_Thrift_ModifySchedule"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_ModifySchedule;
    processMap_["LBN_Thrift_DeleteSchedule"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_DeleteSchedule;
    processMap_["LBN_Thrift_GetContextRuleList"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetContextRuleList;
    processMap_["LBN_Thrift_ModifyContextRule"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_ModifyContextRule;
    processMap_["LBN_Thrift_SetEnableContextRule"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_SetEnableContextRule;
    processMap_["LBN_Thrift_Simulate"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_Simulate;
    processMap_["LBN_Thrift_GetSolarInfo"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetSolarInfo;
    processMap_["LBN_Thrift_GetCharts"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetCharts;
    processMap_["LBN_Thrift_GetParkingSensorList"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetParkingSensorList;
    processMap_["LBN_Thrift_GetSchedulePresetList"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_GetSchedulePresetList;
    processMap_["LBN_Thrift_SetSchedulePreset"] = &LBN_Thrift_ServiceProcessor::process_LBN_Thrift_SetSchedulePreset;
  }

  virtual ~LBN_Thrift_ServiceProcessor() {}
};

class LBN_Thrift_ServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  LBN_Thrift_ServiceProcessorFactory(const ::boost::shared_ptr< LBN_Thrift_ServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< LBN_Thrift_ServiceIfFactory > handlerFactory_;
};

class LBN_Thrift_ServiceMultiface : virtual public LBN_Thrift_ServiceIf {
 public:
  LBN_Thrift_ServiceMultiface(std::vector<boost::shared_ptr<LBN_Thrift_ServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~LBN_Thrift_ServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<LBN_Thrift_ServiceIf> > ifaces_;
  LBN_Thrift_ServiceMultiface() {}
  void add(boost::shared_ptr<LBN_Thrift_ServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool LBN_Thrift_Service_Init() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_Service_Init();
    }
    return ifaces_[i]->LBN_Thrift_Service_Init();
  }

  void LBN_Thrift_GetAreaList(std::vector<stLBN_Area> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetAreaList(_return);
    }
    ifaces_[i]->LBN_Thrift_GetAreaList(_return);
    return;
  }

  void LBN_Thrift_GetModule(stLBN_Module& _return, const int32_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetModule(_return, id);
    }
    ifaces_[i]->LBN_Thrift_GetModule(_return, id);
    return;
  }

  void LBN_Thrift_GetModuleControlMax(stLBN_ModuleControl& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetModuleControlMax(_return);
    }
    ifaces_[i]->LBN_Thrift_GetModuleControlMax(_return);
    return;
  }

  void LBN_Thrift_SetModule(const int32_t moduleId, const stLBN_ModuleControl& control) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_SetModule(moduleId, control);
    }
    ifaces_[i]->LBN_Thrift_SetModule(moduleId, control);
  }

  void LBN_Thrift_SetModules(const std::vector<int32_t> & moduleIdList, const stLBN_ModuleControl& control) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_SetModules(moduleIdList, control);
    }
    ifaces_[i]->LBN_Thrift_SetModules(moduleIdList, control);
  }

  void LBN_Thrift_SetModuleMessage(const int32_t moduleId, const std::string& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_SetModuleMessage(moduleId, message);
    }
    ifaces_[i]->LBN_Thrift_SetModuleMessage(moduleId, message);
  }

  void LBN_Thrift_SetSwitch(const int32_t switchId, const std::vector<stLBN_Module> & modules) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_SetSwitch(switchId, modules);
    }
    ifaces_[i]->LBN_Thrift_SetSwitch(switchId, modules);
  }

  void LBN_Thrift_GetSwitches(std::vector<stLBN_Switch> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetSwitches(_return);
    }
    ifaces_[i]->LBN_Thrift_GetSwitches(_return);
    return;
  }

  void LBN_Thrift_GetPowerMeter(stLBN_PowerMeter& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetPowerMeter(_return);
    }
    ifaces_[i]->LBN_Thrift_GetPowerMeter(_return);
    return;
  }

  void LBN_Thrift_GetPowerMeterOneDay(stLBN_PowerMeterOneDay& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetPowerMeterOneDay(_return);
    }
    ifaces_[i]->LBN_Thrift_GetPowerMeterOneDay(_return);
    return;
  }

  void LBN_Thrift_GetDisasterInfo(stLBN_DisasterInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetDisasterInfo(_return);
    }
    ifaces_[i]->LBN_Thrift_GetDisasterInfo(_return);
    return;
  }

  void LBN_Thrift_GetAdminPassword(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetAdminPassword(_return);
    }
    ifaces_[i]->LBN_Thrift_GetAdminPassword(_return);
    return;
  }

  void LBN_Thrift_SetActive(const bool active) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_SetActive(active);
    }
    ifaces_[i]->LBN_Thrift_SetActive(active);
  }

  bool LBN_Thrift_GetActive() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetActive();
    }
    return ifaces_[i]->LBN_Thrift_GetActive();
  }

  void LBN_Thrift_SetAuto(const bool automatic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_SetAuto(automatic);
    }
    ifaces_[i]->LBN_Thrift_SetAuto(automatic);
  }

  bool LBN_Thrift_GetAuto() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetAuto();
    }
    return ifaces_[i]->LBN_Thrift_GetAuto();
  }

  void LBN_Thrift_SetSimulate(const bool simulate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_SetSimulate(simulate);
    }
    ifaces_[i]->LBN_Thrift_SetSimulate(simulate);
  }

  void LBN_Thrift_GetSceneList(std::vector<stLBN_Scene> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetSceneList(_return);
    }
    ifaces_[i]->LBN_Thrift_GetSceneList(_return);
    return;
  }

  int32_t LBN_Thrift_AddScene(const std::string& title) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_AddScene(title);
    }
    return ifaces_[i]->LBN_Thrift_AddScene(title);
  }

  void LBN_Thrift_ModifyScene(const stLBN_Scene& scene) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_ModifyScene(scene);
    }
    ifaces_[i]->LBN_Thrift_ModifyScene(scene);
  }

  void LBN_Thrift_DeleteScene(const int32_t sceneId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_DeleteScene(sceneId);
    }
    ifaces_[i]->LBN_Thrift_DeleteScene(sceneId);
  }

  void LBN_Thrift_PreviewScene(const int32_t sceneId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_PreviewScene(sceneId);
    }
    ifaces_[i]->LBN_Thrift_PreviewScene(sceneId);
  }

  void LBN_Thrift_GetScheduleList(std::vector<stLBN_Schedule> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetScheduleList(_return);
    }
    ifaces_[i]->LBN_Thrift_GetScheduleList(_return);
    return;
  }

  int32_t LBN_Thrift_AddSchedule(const stLBN_Scene& scene, const int64_t time, const bool repeatAll, const std::vector<bool> & repeatDays) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_AddSchedule(scene, time, repeatAll, repeatDays);
    }
    return ifaces_[i]->LBN_Thrift_AddSchedule(scene, time, repeatAll, repeatDays);
  }

  void LBN_Thrift_ModifySchedule(const stLBN_Schedule& schedule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_ModifySchedule(schedule);
    }
    ifaces_[i]->LBN_Thrift_ModifySchedule(schedule);
  }

  void LBN_Thrift_DeleteSchedule(const int32_t scheduleId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_DeleteSchedule(scheduleId);
    }
    ifaces_[i]->LBN_Thrift_DeleteSchedule(scheduleId);
  }

  void LBN_Thrift_GetContextRuleList(std::vector<stLBN_ContextRule> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetContextRuleList(_return);
    }
    ifaces_[i]->LBN_Thrift_GetContextRuleList(_return);
    return;
  }

  void LBN_Thrift_ModifyContextRule(const stLBN_ContextRule& rule) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_ModifyContextRule(rule);
    }
    ifaces_[i]->LBN_Thrift_ModifyContextRule(rule);
  }

  void LBN_Thrift_SetEnableContextRule(const int32_t contextId, const bool enable) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_SetEnableContextRule(contextId, enable);
    }
    ifaces_[i]->LBN_Thrift_SetEnableContextRule(contextId, enable);
  }

  void LBN_Thrift_Simulate(const int64_t time) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_Simulate(time);
    }
    ifaces_[i]->LBN_Thrift_Simulate(time);
  }

  void LBN_Thrift_GetSolarInfo(stLBN_SolarInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetSolarInfo(_return);
    }
    ifaces_[i]->LBN_Thrift_GetSolarInfo(_return);
    return;
  }

  void LBN_Thrift_GetCharts(std::vector<stLBN_Chart> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetCharts(_return);
    }
    ifaces_[i]->LBN_Thrift_GetCharts(_return);
    return;
  }

  void LBN_Thrift_GetParkingSensorList(std::vector<stLBN_ParkingSensor> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetParkingSensorList(_return);
    }
    ifaces_[i]->LBN_Thrift_GetParkingSensorList(_return);
    return;
  }

  void LBN_Thrift_GetSchedulePresetList(std::vector<stLBN_SchedulePreset> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_GetSchedulePresetList(_return);
    }
    ifaces_[i]->LBN_Thrift_GetSchedulePresetList(_return);
    return;
  }

  void LBN_Thrift_SetSchedulePreset(const int32_t presetId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->LBN_Thrift_SetSchedulePreset(presetId);
    }
    ifaces_[i]->LBN_Thrift_SetSchedulePreset(presetId);
  }

};

} // namespace

#endif
