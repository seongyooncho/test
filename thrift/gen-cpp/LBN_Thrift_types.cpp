/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "LBN_Thrift_types.h"

#include <algorithm>

namespace LBN_Thrift {

int _kLBN_SwitchTypeValues[] = {
  LBN_SwitchType::TYPE_1,
  LBN_SwitchType::TYPE_2,
  LBN_SwitchType::TYPE_3,
  LBN_SwitchType::TYPE_4
};
const char* _kLBN_SwitchTypeNames[] = {
  "TYPE_1",
  "TYPE_2",
  "TYPE_3",
  "TYPE_4"
};
const std::map<int, const char*> _LBN_SwitchType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kLBN_SwitchTypeValues, _kLBN_SwitchTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kLBN_ModuleTypeValues[] = {
  LBN_ModuleType::SQUARE_COLOR,
  LBN_ModuleType::MR16_WARM_WHITE,
  LBN_ModuleType::MR16_COOL_WHITE,
  LBN_ModuleType::STREET_WHITE,
  LBN_ModuleType::DMX_COLOR,
  LBN_ModuleType::BAR_COOL_WHITE,
  LBN_ModuleType::MOVING_WHITE
};
const char* _kLBN_ModuleTypeNames[] = {
  "SQUARE_COLOR",
  "MR16_WARM_WHITE",
  "MR16_COOL_WHITE",
  "STREET_WHITE",
  "DMX_COLOR",
  "BAR_COOL_WHITE",
  "MOVING_WHITE"
};
const std::map<int, const char*> _LBN_ModuleType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kLBN_ModuleTypeValues, _kLBN_ModuleTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* stLBN_Thrift::ascii_fingerprint = "99914B932BD37A50B983C5E7C90AE93B";
const uint8_t stLBN_Thrift::binary_fingerprint[16] = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

uint32_t stLBN_Thrift::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_Thrift::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_Thrift");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_Thrift &a, stLBN_Thrift &b) {
  using ::std::swap;
  (void) a;
  (void) b;
}

const char* point::ascii_fingerprint = "EA2086D2BB14222991D7B0497DE7B58B";
const uint8_t point::binary_fingerprint[16] = {0xEA,0x20,0x86,0xD2,0xBB,0x14,0x22,0x29,0x91,0xD7,0xB0,0x49,0x7D,0xE7,0xB5,0x8B};

uint32_t point::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t point::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("point");

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(point &a, point &b) {
  using ::std::swap;
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.__isset, b.__isset);
}

const char* stLBN_ModuleControl::ascii_fingerprint = "77876CBE061C94D254BC9DC7348A409C";
const uint8_t stLBN_ModuleControl::binary_fingerprint[16] = {0x77,0x87,0x6C,0xBE,0x06,0x1C,0x94,0xD2,0x54,0xBC,0x9D,0xC7,0x34,0x8A,0x40,0x9C};

uint32_t stLBN_ModuleControl::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cwdimming);
          this->__isset.cwdimming = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->wwdimming);
          this->__isset.wwdimming = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->red);
          this->__isset.red = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->green);
          this->__isset.green = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->blue);
          this->__isset.blue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pan);
          this->__isset.pan = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tilt);
          this->__isset.tilt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->zoom);
          this->__isset.zoom = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->up);
          this->__isset.up = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->down);
          this->__isset.down = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->left);
          this->__isset.left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->right);
          this->__isset.right = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stop);
          this->__isset.stop = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_ModuleControl::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_ModuleControl");

  if (this->__isset.cwdimming) {
    xfer += oprot->writeFieldBegin("cwdimming", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->cwdimming);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.wwdimming) {
    xfer += oprot->writeFieldBegin("wwdimming", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->wwdimming);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.red) {
    xfer += oprot->writeFieldBegin("red", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->red);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.green) {
    xfer += oprot->writeFieldBegin("green", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->green);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blue) {
    xfer += oprot->writeFieldBegin("blue", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->blue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pan) {
    xfer += oprot->writeFieldBegin("pan", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->pan);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tilt) {
    xfer += oprot->writeFieldBegin("tilt", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32(this->tilt);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.zoom) {
    xfer += oprot->writeFieldBegin("zoom", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->zoom);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.up) {
    xfer += oprot->writeFieldBegin("up", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->up);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.down) {
    xfer += oprot->writeFieldBegin("down", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->down);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.left) {
    xfer += oprot->writeFieldBegin("left", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32(this->left);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.right) {
    xfer += oprot->writeFieldBegin("right", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32(this->right);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.stop) {
    xfer += oprot->writeFieldBegin("stop", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->stop);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_ModuleControl &a, stLBN_ModuleControl &b) {
  using ::std::swap;
  swap(a.cwdimming, b.cwdimming);
  swap(a.wwdimming, b.wwdimming);
  swap(a.red, b.red);
  swap(a.green, b.green);
  swap(a.blue, b.blue);
  swap(a.pan, b.pan);
  swap(a.tilt, b.tilt);
  swap(a.zoom, b.zoom);
  swap(a.up, b.up);
  swap(a.down, b.down);
  swap(a.left, b.left);
  swap(a.right, b.right);
  swap(a.stop, b.stop);
  swap(a.__isset, b.__isset);
}

const char* stLBN_ModuleSensor::ascii_fingerprint = "372D6E15B9002FF6ABAF09435C5C61E0";
const uint8_t stLBN_ModuleSensor::binary_fingerprint[16] = {0x37,0x2D,0x6E,0x15,0xB9,0x00,0x2F,0xF6,0xAB,0xAF,0x09,0x43,0x5C,0x5C,0x61,0xE0};

uint32_t stLBN_ModuleSensor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ambient);
          this->__isset.ambient = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->red);
          this->__isset.red = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->green);
          this->__isset.green = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->blue);
          this->__isset.blue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cieX);
          this->__isset.cieX = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cieY);
          this->__isset.cieY = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->temp);
          this->__isset.temp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->humid);
          this->__isset.humid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_ModuleSensor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_ModuleSensor");

  if (this->__isset.ambient) {
    xfer += oprot->writeFieldBegin("ambient", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->ambient);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.red) {
    xfer += oprot->writeFieldBegin("red", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->red);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.green) {
    xfer += oprot->writeFieldBegin("green", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->green);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.blue) {
    xfer += oprot->writeFieldBegin("blue", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->blue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cieX) {
    xfer += oprot->writeFieldBegin("cieX", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->cieX);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cieY) {
    xfer += oprot->writeFieldBegin("cieY", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->cieY);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.temp) {
    xfer += oprot->writeFieldBegin("temp", ::apache::thrift::protocol::T_DOUBLE, 7);
    xfer += oprot->writeDouble(this->temp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.humid) {
    xfer += oprot->writeFieldBegin("humid", ::apache::thrift::protocol::T_DOUBLE, 8);
    xfer += oprot->writeDouble(this->humid);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_ModuleSensor &a, stLBN_ModuleSensor &b) {
  using ::std::swap;
  swap(a.ambient, b.ambient);
  swap(a.red, b.red);
  swap(a.green, b.green);
  swap(a.blue, b.blue);
  swap(a.cieX, b.cieX);
  swap(a.cieY, b.cieY);
  swap(a.temp, b.temp);
  swap(a.humid, b.humid);
  swap(a.__isset, b.__isset);
}

const char* stLBN_Group::ascii_fingerprint = "E86CACEB22240450EDCBEFC3A83970E4";
const uint8_t stLBN_Group::binary_fingerprint[16] = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

uint32_t stLBN_Group::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_Group::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_Group");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_Group &a, stLBN_Group &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

const char* stLBN_Scene::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t stLBN_Scene::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t stLBN_Scene::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_Scene::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_Scene");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_Scene &a, stLBN_Scene &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.title, b.title);
  swap(a.__isset, b.__isset);
}

const char* stLBN_Module::ascii_fingerprint = "ED82D1B1877EBD9349BA1CD0C8A007ED";
const uint8_t stLBN_Module::binary_fingerprint[16] = {0xED,0x82,0xD1,0xB1,0x87,0x7E,0xBD,0x93,0x49,0xBA,0x1C,0xD0,0xC8,0xA0,0x07,0xED};

uint32_t stLBN_Module::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (LBN_ModuleType::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->control.read(iprot);
          this->__isset.control = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->groups.clear();
            uint32_t _size1;
            ::apache::thrift::protocol::TType _etype4;
            xfer += iprot->readListBegin(_etype4, _size1);
            this->groups.resize(_size1);
            uint32_t _i5;
            for (_i5 = 0; _i5 < _size1; ++_i5)
            {
              xfer += this->groups[_i5].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.groups = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->sensor.read(iprot);
          this->__isset.sensor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->origin.read(iprot);
          this->__isset.origin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_Module::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_Module");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32((int32_t)this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("control", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->control.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groups", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->groups.size()));
    std::vector<stLBN_Group> ::const_iterator _iter6;
    for (_iter6 = this->groups.begin(); _iter6 != this->groups.end(); ++_iter6)
    {
      xfer += (*_iter6).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sensor", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->sensor.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("origin", ::apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->origin.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_Module &a, stLBN_Module &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.type, b.type);
  swap(a.control, b.control);
  swap(a.groups, b.groups);
  swap(a.sensor, b.sensor);
  swap(a.message, b.message);
  swap(a.origin, b.origin);
  swap(a.__isset, b.__isset);
}

const char* stLBN_Switch::ascii_fingerprint = "F75461B670D113237FD7F831089F2760";
const uint8_t stLBN_Switch::binary_fingerprint[16] = {0xF7,0x54,0x61,0xB6,0x70,0xD1,0x13,0x23,0x7F,0xD7,0xF8,0x31,0x08,0x9F,0x27,0x60};

uint32_t stLBN_Switch::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->modules.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->modules.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += this->modules[_i11].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.modules = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->scenes.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->scenes.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->scenes[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.scenes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->groups.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->groups.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += this->groups[_i21].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.groups = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_Switch::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_Switch");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modules", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->modules.size()));
    std::vector<stLBN_Module> ::const_iterator _iter22;
    for (_iter22 = this->modules.begin(); _iter22 != this->modules.end(); ++_iter22)
    {
      xfer += (*_iter22).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scenes", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->scenes.size()));
    std::vector<stLBN_Scene> ::const_iterator _iter23;
    for (_iter23 = this->scenes.begin(); _iter23 != this->scenes.end(); ++_iter23)
    {
      xfer += (*_iter23).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("groups", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->groups.size()));
    std::vector<stLBN_Group> ::const_iterator _iter24;
    for (_iter24 = this->groups.begin(); _iter24 != this->groups.end(); ++_iter24)
    {
      xfer += (*_iter24).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_Switch &a, stLBN_Switch &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.modules, b.modules);
  swap(a.scenes, b.scenes);
  swap(a.groups, b.groups);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

const char* stLBN_Floor::ascii_fingerprint = "12CD1476FCB8C28501629F5B9E2C101B";
const uint8_t stLBN_Floor::binary_fingerprint[16] = {0x12,0xCD,0x14,0x76,0xFC,0xB8,0xC2,0x85,0x01,0x62,0x9F,0x5B,0x9E,0x2C,0x10,0x1B};

uint32_t stLBN_Floor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->modules.clear();
            uint32_t _size25;
            ::apache::thrift::protocol::TType _etype28;
            xfer += iprot->readListBegin(_etype28, _size25);
            this->modules.resize(_size25);
            uint32_t _i29;
            for (_i29 = 0; _i29 < _size25; ++_i29)
            {
              xfer += this->modules[_i29].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.modules = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_Floor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_Floor");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modules", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->modules.size()));
    std::vector<stLBN_Module> ::const_iterator _iter30;
    for (_iter30 = this->modules.begin(); _iter30 != this->modules.end(); ++_iter30)
    {
      xfer += (*_iter30).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_Floor &a, stLBN_Floor &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.modules, b.modules);
  swap(a.__isset, b.__isset);
}

const char* stLBN_Area::ascii_fingerprint = "73190249BC210E892C1196109887A55F";
const uint8_t stLBN_Area::binary_fingerprint[16] = {0x73,0x19,0x02,0x49,0xBC,0x21,0x0E,0x89,0x2C,0x11,0x96,0x10,0x98,0x87,0xA5,0x5F};

uint32_t stLBN_Area::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->floors.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->floors.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += this->floors[_i35].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.floors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_Area::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_Area");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("floors", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->floors.size()));
    std::vector<stLBN_Floor> ::const_iterator _iter36;
    for (_iter36 = this->floors.begin(); _iter36 != this->floors.end(); ++_iter36)
    {
      xfer += (*_iter36).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_Area &a, stLBN_Area &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.floors, b.floors);
  swap(a.__isset, b.__isset);
}

const char* stLBN_DisasterInfo::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t stLBN_DisasterInfo::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t stLBN_DisasterInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->date);
          this->__isset.date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_DisasterInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_DisasterInfo");

  xfer += oprot->writeFieldBegin("date", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_DisasterInfo &a, stLBN_DisasterInfo &b) {
  using ::std::swap;
  swap(a.date, b.date);
  swap(a.description, b.description);
  swap(a.__isset, b.__isset);
}

const char* stLBN_PowerMeter::ascii_fingerprint = "9837094CC99FC796C8484D72416C8459";
const uint8_t stLBN_PowerMeter::binary_fingerprint[16] = {0x98,0x37,0x09,0x4C,0xC9,0x9F,0xC7,0x96,0xC8,0x48,0x4D,0x72,0x41,0x6C,0x84,0x59};

uint32_t stLBN_PowerMeter::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hour);
          this->__isset.hour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minute);
          this->__isset.minute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->second);
          this->__isset.second = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dVoltage);
          this->__isset.dVoltage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dCurrent);
          this->__isset.dCurrent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dPower);
          this->__isset.dPower = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_PowerMeter::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_PowerMeter");

  xfer += oprot->writeFieldBegin("hour", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->hour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minute", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->minute);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->second);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dVoltage", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->dVoltage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dCurrent", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->dCurrent);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dPower", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->dPower);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_PowerMeter &a, stLBN_PowerMeter &b) {
  using ::std::swap;
  swap(a.hour, b.hour);
  swap(a.minute, b.minute);
  swap(a.second, b.second);
  swap(a.dVoltage, b.dVoltage);
  swap(a.dCurrent, b.dCurrent);
  swap(a.dPower, b.dPower);
  swap(a.__isset, b.__isset);
}

const char* stLBN_PowerMeterOneDay::ascii_fingerprint = "242DDE879BE97AB9996EE5E57F45E6B7";
const uint8_t stLBN_PowerMeterOneDay::binary_fingerprint[16] = {0x24,0x2D,0xDE,0x87,0x9B,0xE9,0x7A,0xB9,0x99,0x6E,0xE5,0xE5,0x7F,0x45,0xE6,0xB7};

uint32_t stLBN_PowerMeterOneDay::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->year);
          this->__isset.year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->month);
          this->__isset.month = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->day);
          this->__isset.day = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->powermeters.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->powermeters.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += this->powermeters[_i41].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.powermeters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_PowerMeterOneDay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_PowerMeterOneDay");

  xfer += oprot->writeFieldBegin("year", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->year);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("month", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->month);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("day", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->day);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("powermeters", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->powermeters.size()));
    std::vector<stLBN_PowerMeter> ::const_iterator _iter42;
    for (_iter42 = this->powermeters.begin(); _iter42 != this->powermeters.end(); ++_iter42)
    {
      xfer += (*_iter42).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_PowerMeterOneDay &a, stLBN_PowerMeterOneDay &b) {
  using ::std::swap;
  swap(a.year, b.year);
  swap(a.month, b.month);
  swap(a.day, b.day);
  swap(a.powermeters, b.powermeters);
  swap(a.__isset, b.__isset);
}

const char* stLBN_Schedule::ascii_fingerprint = "AD8F557835D91E74B851CA7CCA4947D2";
const uint8_t stLBN_Schedule::binary_fingerprint[16] = {0xAD,0x8F,0x55,0x78,0x35,0xD9,0x1E,0x74,0xB8,0x51,0xCA,0x7C,0xCA,0x49,0x47,0xD2};

uint32_t stLBN_Schedule::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->time);
          this->__isset.time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->scene.read(iprot);
          this->__isset.scene = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->repeatAll);
          this->__isset.repeatAll = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->repeatDays.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->repeatDays.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += iprot->readBool(this->repeatDays[_i47]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.repeatDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_Schedule::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_Schedule");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene", ::apache::thrift::protocol::T_STRUCT, 3);
  xfer += this->scene.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repeatAll", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->repeatAll);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repeatDays", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_BOOL, static_cast<uint32_t>(this->repeatDays.size()));
    std::vector<bool> ::const_iterator _iter48;
    for (_iter48 = this->repeatDays.begin(); _iter48 != this->repeatDays.end(); ++_iter48)
    {
      xfer += oprot->writeBool((*_iter48));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_Schedule &a, stLBN_Schedule &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.time, b.time);
  swap(a.scene, b.scene);
  swap(a.repeatAll, b.repeatAll);
  swap(a.repeatDays, b.repeatDays);
  swap(a.__isset, b.__isset);
}

const char* stLBN_ContextRule::ascii_fingerprint = "95EFC9A0E6FDA683BED0F9180FDC66B8";
const uint8_t stLBN_ContextRule::binary_fingerprint[16] = {0x95,0xEF,0xC9,0xA0,0xE6,0xFD,0xA6,0x83,0xBE,0xD0,0xF9,0x18,0x0F,0xDC,0x66,0xB8};

uint32_t stLBN_ContextRule::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->description);
          this->__isset.description = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->scene.read(iprot);
          this->__isset.scene = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->hasScene);
          this->__isset.hasScene = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->enabled);
          this->__isset.enabled = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_ContextRule::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_ContextRule");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("description", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->description);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("scene", ::apache::thrift::protocol::T_STRUCT, 4);
  xfer += this->scene.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hasScene", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->hasScene);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enabled", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->enabled);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_ContextRule &a, stLBN_ContextRule &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.title, b.title);
  swap(a.description, b.description);
  swap(a.scene, b.scene);
  swap(a.hasScene, b.hasScene);
  swap(a.enabled, b.enabled);
  swap(a.__isset, b.__isset);
}

const char* stLBN_SolarInfo::ascii_fingerprint = "364EBD69B251B3387D4979EC4E66F0F1";
const uint8_t stLBN_SolarInfo::binary_fingerprint[16] = {0x36,0x4E,0xBD,0x69,0xB2,0x51,0xB3,0x38,0x7D,0x49,0x79,0xEC,0x4E,0x66,0xF0,0xF1};

uint32_t stLBN_SolarInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->currentTime);
          this->__isset.currentTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitude);
          this->__isset.latitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitude);
          this->__isset.longitude = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->azimuth);
          this->__isset.azimuth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->elevation);
          this->__isset.elevation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sunriseTime);
          this->__isset.sunriseTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->suntransitTime);
          this->__isset.suntransitTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sunsetTime);
          this->__isset.sunsetTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_SolarInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_SolarInfo");

  xfer += oprot->writeFieldBegin("currentTime", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->currentTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitude", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->latitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitude", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->longitude);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("azimuth", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->azimuth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elevation", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->elevation);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sunriseTime", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->sunriseTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("suntransitTime", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->suntransitTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sunsetTime", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->sunsetTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_SolarInfo &a, stLBN_SolarInfo &b) {
  using ::std::swap;
  swap(a.currentTime, b.currentTime);
  swap(a.latitude, b.latitude);
  swap(a.longitude, b.longitude);
  swap(a.azimuth, b.azimuth);
  swap(a.elevation, b.elevation);
  swap(a.sunriseTime, b.sunriseTime);
  swap(a.suntransitTime, b.suntransitTime);
  swap(a.sunsetTime, b.sunsetTime);
  swap(a.__isset, b.__isset);
}

const char* stLBN_GraphData::ascii_fingerprint = "061F1470A5BFC7F82E73CA7B179FFF41";
const uint8_t stLBN_GraphData::binary_fingerprint[16] = {0x06,0x1F,0x14,0x70,0xA5,0xBF,0xC7,0xF8,0x2E,0x73,0xCA,0x7B,0x17,0x9F,0xFF,0x41};

uint32_t stLBN_GraphData::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->values.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->values.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += iprot->readDouble(this->values[_i53]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_GraphData::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_GraphData");

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("values", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->values.size()));
    std::vector<double> ::const_iterator _iter54;
    for (_iter54 = this->values.begin(); _iter54 != this->values.end(); ++_iter54)
    {
      xfer += oprot->writeDouble((*_iter54));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_GraphData &a, stLBN_GraphData &b) {
  using ::std::swap;
  swap(a.title, b.title);
  swap(a.values, b.values);
  swap(a.__isset, b.__isset);
}

const char* stLBN_Chart::ascii_fingerprint = "609BF462F28E3F9C7FB28CB30E08D802";
const uint8_t stLBN_Chart::binary_fingerprint[16] = {0x60,0x9B,0xF4,0x62,0xF2,0x8E,0x3F,0x9C,0x7F,0xB2,0x8C,0xB3,0x0E,0x08,0xD8,0x02};

uint32_t stLBN_Chart::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->data.clear();
            uint32_t _size55;
            ::apache::thrift::protocol::TType _etype58;
            xfer += iprot->readListBegin(_etype58, _size55);
            this->data.resize(_size55);
            uint32_t _i59;
            for (_i59 = 0; _i59 < _size55; ++_i59)
            {
              xfer += this->data[_i59].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->xLabels.clear();
            uint32_t _size60;
            ::apache::thrift::protocol::TType _etype63;
            xfer += iprot->readListBegin(_etype63, _size60);
            this->xLabels.resize(_size60);
            uint32_t _i64;
            for (_i64 = 0; _i64 < _size60; ++_i64)
            {
              xfer += iprot->readString(this->xLabels[_i64]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.xLabels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_Chart::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_Chart");

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->data.size()));
    std::vector<stLBN_GraphData> ::const_iterator _iter65;
    for (_iter65 = this->data.begin(); _iter65 != this->data.end(); ++_iter65)
    {
      xfer += (*_iter65).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("xLabels", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->xLabels.size()));
    std::vector<std::string> ::const_iterator _iter66;
    for (_iter66 = this->xLabels.begin(); _iter66 != this->xLabels.end(); ++_iter66)
    {
      xfer += oprot->writeString((*_iter66));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_Chart &a, stLBN_Chart &b) {
  using ::std::swap;
  swap(a.title, b.title);
  swap(a.data, b.data);
  swap(a.xLabels, b.xLabels);
  swap(a.__isset, b.__isset);
}

const char* stLBN_ParkingSensor::ascii_fingerprint = "FE6EEA0EE646C9880F01CB7CB8D8504D";
const uint8_t stLBN_ParkingSensor::binary_fingerprint[16] = {0xFE,0x6E,0xEA,0x0E,0xE6,0x46,0xC9,0x88,0x0F,0x01,0xCB,0x7C,0xB8,0xD8,0x50,0x4D};

uint32_t stLBN_ParkingSensor::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->floor);
          this->__isset.floor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->zone);
          this->__isset.zone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->slot);
          this->__isset.slot = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_ParkingSensor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_ParkingSensor");

  xfer += oprot->writeFieldBegin("floor", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->floor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("zone", ::apache::thrift::protocol::T_BYTE, 2);
  xfer += oprot->writeByte(this->zone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("slot", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->slot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_BYTE, 4);
  xfer += oprot->writeByte(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_ParkingSensor &a, stLBN_ParkingSensor &b) {
  using ::std::swap;
  swap(a.floor, b.floor);
  swap(a.zone, b.zone);
  swap(a.slot, b.slot);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

const char* stLBN_SchedulePreset::ascii_fingerprint = "3F5FC93B338687BC7235B1AB103F47B3";
const uint8_t stLBN_SchedulePreset::binary_fingerprint[16] = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

uint32_t stLBN_SchedulePreset::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->title);
          this->__isset.title = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stLBN_SchedulePreset::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("stLBN_SchedulePreset");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->title);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stLBN_SchedulePreset &a, stLBN_SchedulePreset &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.title, b.title);
  swap(a.__isset, b.__isset);
}

} // namespace
