//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


LBN_SwitchType = {
'TYPE_1' : 0,
'TYPE_2' : 1,
'TYPE_3' : 2,
'TYPE_4' : 3
};
LBN_ModuleType = {
'SQUARE_COLOR' : 0,
'MR16_WARM_WHITE' : 1,
'MR16_COOL_WHITE' : 2,
'STREET_WHITE' : 3,
'DMX_COLOR' : 4,
'BAR_COOL_WHITE' : 5,
'MOVING_WHITE' : 6
};
stLBN_Thrift = function(args) {
};
stLBN_Thrift.prototype = {};
stLBN_Thrift.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_Thrift.prototype.write = function(output) {
  output.writeStructBegin('stLBN_Thrift');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

point = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined) {
      this.x = args.x;
    }
    if (args.y !== undefined) {
      this.y = args.y;
    }
  }
};
point.prototype = {};
point.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.x = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

point.prototype.write = function(output) {
  output.writeStructBegin('point');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_ModuleControl = function(args) {
  this.cwdimming = null;
  this.wwdimming = null;
  this.red = null;
  this.green = null;
  this.blue = null;
  this.pan = null;
  this.tilt = null;
  this.zoom = null;
  this.up = null;
  this.down = null;
  this.left = null;
  this.right = null;
  this.stop = null;
  if (args) {
    if (args.cwdimming !== undefined) {
      this.cwdimming = args.cwdimming;
    }
    if (args.wwdimming !== undefined) {
      this.wwdimming = args.wwdimming;
    }
    if (args.red !== undefined) {
      this.red = args.red;
    }
    if (args.green !== undefined) {
      this.green = args.green;
    }
    if (args.blue !== undefined) {
      this.blue = args.blue;
    }
    if (args.pan !== undefined) {
      this.pan = args.pan;
    }
    if (args.tilt !== undefined) {
      this.tilt = args.tilt;
    }
    if (args.zoom !== undefined) {
      this.zoom = args.zoom;
    }
    if (args.up !== undefined) {
      this.up = args.up;
    }
    if (args.down !== undefined) {
      this.down = args.down;
    }
    if (args.left !== undefined) {
      this.left = args.left;
    }
    if (args.right !== undefined) {
      this.right = args.right;
    }
    if (args.stop !== undefined) {
      this.stop = args.stop;
    }
  }
};
stLBN_ModuleControl.prototype = {};
stLBN_ModuleControl.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.cwdimming = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.wwdimming = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.red = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.green = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.blue = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.pan = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.tilt = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.zoom = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.up = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.down = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.left = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.I32) {
        this.right = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.stop = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_ModuleControl.prototype.write = function(output) {
  output.writeStructBegin('stLBN_ModuleControl');
  if (this.cwdimming !== null && this.cwdimming !== undefined) {
    output.writeFieldBegin('cwdimming', Thrift.Type.I32, 1);
    output.writeI32(this.cwdimming);
    output.writeFieldEnd();
  }
  if (this.wwdimming !== null && this.wwdimming !== undefined) {
    output.writeFieldBegin('wwdimming', Thrift.Type.I32, 2);
    output.writeI32(this.wwdimming);
    output.writeFieldEnd();
  }
  if (this.red !== null && this.red !== undefined) {
    output.writeFieldBegin('red', Thrift.Type.I32, 3);
    output.writeI32(this.red);
    output.writeFieldEnd();
  }
  if (this.green !== null && this.green !== undefined) {
    output.writeFieldBegin('green', Thrift.Type.I32, 4);
    output.writeI32(this.green);
    output.writeFieldEnd();
  }
  if (this.blue !== null && this.blue !== undefined) {
    output.writeFieldBegin('blue', Thrift.Type.I32, 5);
    output.writeI32(this.blue);
    output.writeFieldEnd();
  }
  if (this.pan !== null && this.pan !== undefined) {
    output.writeFieldBegin('pan', Thrift.Type.I32, 6);
    output.writeI32(this.pan);
    output.writeFieldEnd();
  }
  if (this.tilt !== null && this.tilt !== undefined) {
    output.writeFieldBegin('tilt', Thrift.Type.I32, 7);
    output.writeI32(this.tilt);
    output.writeFieldEnd();
  }
  if (this.zoom !== null && this.zoom !== undefined) {
    output.writeFieldBegin('zoom', Thrift.Type.I32, 8);
    output.writeI32(this.zoom);
    output.writeFieldEnd();
  }
  if (this.up !== null && this.up !== undefined) {
    output.writeFieldBegin('up', Thrift.Type.I32, 9);
    output.writeI32(this.up);
    output.writeFieldEnd();
  }
  if (this.down !== null && this.down !== undefined) {
    output.writeFieldBegin('down', Thrift.Type.I32, 10);
    output.writeI32(this.down);
    output.writeFieldEnd();
  }
  if (this.left !== null && this.left !== undefined) {
    output.writeFieldBegin('left', Thrift.Type.I32, 11);
    output.writeI32(this.left);
    output.writeFieldEnd();
  }
  if (this.right !== null && this.right !== undefined) {
    output.writeFieldBegin('right', Thrift.Type.I32, 12);
    output.writeI32(this.right);
    output.writeFieldEnd();
  }
  if (this.stop !== null && this.stop !== undefined) {
    output.writeFieldBegin('stop', Thrift.Type.I32, 13);
    output.writeI32(this.stop);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_ModuleSensor = function(args) {
  this.ambient = null;
  this.red = null;
  this.green = null;
  this.blue = null;
  this.cieX = null;
  this.cieY = null;
  this.temp = null;
  this.humid = null;
  if (args) {
    if (args.ambient !== undefined) {
      this.ambient = args.ambient;
    }
    if (args.red !== undefined) {
      this.red = args.red;
    }
    if (args.green !== undefined) {
      this.green = args.green;
    }
    if (args.blue !== undefined) {
      this.blue = args.blue;
    }
    if (args.cieX !== undefined) {
      this.cieX = args.cieX;
    }
    if (args.cieY !== undefined) {
      this.cieY = args.cieY;
    }
    if (args.temp !== undefined) {
      this.temp = args.temp;
    }
    if (args.humid !== undefined) {
      this.humid = args.humid;
    }
  }
};
stLBN_ModuleSensor.prototype = {};
stLBN_ModuleSensor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ambient = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.red = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.green = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.blue = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cieX = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cieY = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.temp = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.humid = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_ModuleSensor.prototype.write = function(output) {
  output.writeStructBegin('stLBN_ModuleSensor');
  if (this.ambient !== null && this.ambient !== undefined) {
    output.writeFieldBegin('ambient', Thrift.Type.I32, 1);
    output.writeI32(this.ambient);
    output.writeFieldEnd();
  }
  if (this.red !== null && this.red !== undefined) {
    output.writeFieldBegin('red', Thrift.Type.I32, 2);
    output.writeI32(this.red);
    output.writeFieldEnd();
  }
  if (this.green !== null && this.green !== undefined) {
    output.writeFieldBegin('green', Thrift.Type.I32, 3);
    output.writeI32(this.green);
    output.writeFieldEnd();
  }
  if (this.blue !== null && this.blue !== undefined) {
    output.writeFieldBegin('blue', Thrift.Type.I32, 4);
    output.writeI32(this.blue);
    output.writeFieldEnd();
  }
  if (this.cieX !== null && this.cieX !== undefined) {
    output.writeFieldBegin('cieX', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.cieX);
    output.writeFieldEnd();
  }
  if (this.cieY !== null && this.cieY !== undefined) {
    output.writeFieldBegin('cieY', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.cieY);
    output.writeFieldEnd();
  }
  if (this.temp !== null && this.temp !== undefined) {
    output.writeFieldBegin('temp', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.temp);
    output.writeFieldEnd();
  }
  if (this.humid !== null && this.humid !== undefined) {
    output.writeFieldBegin('humid', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.humid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_Group = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
  }
};
stLBN_Group.prototype = {};
stLBN_Group.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_Group.prototype.write = function(output) {
  output.writeStructBegin('stLBN_Group');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_Scene = function(args) {
  this.id = null;
  this.title = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
  }
};
stLBN_Scene.prototype = {};
stLBN_Scene.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_Scene.prototype.write = function(output) {
  output.writeStructBegin('stLBN_Scene');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_Module = function(args) {
  this.id = null;
  this.type = null;
  this.control = null;
  this.groups = null;
  this.sensor = null;
  this.message = null;
  this.origin = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
    if (args.control !== undefined) {
      this.control = args.control;
    }
    if (args.groups !== undefined) {
      this.groups = args.groups;
    }
    if (args.sensor !== undefined) {
      this.sensor = args.sensor;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
    if (args.origin !== undefined) {
      this.origin = args.origin;
    }
  }
};
stLBN_Module.prototype = {};
stLBN_Module.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.control = new stLBN_ModuleControl();
        this.control.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.groups = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new stLBN_Group();
          elem6.read(input);
          this.groups.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.sensor = new stLBN_ModuleSensor();
        this.sensor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.origin = new point();
        this.origin.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_Module.prototype.write = function(output) {
  output.writeStructBegin('stLBN_Module');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.control !== null && this.control !== undefined) {
    output.writeFieldBegin('control', Thrift.Type.STRUCT, 3);
    this.control.write(output);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter7 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter7))
      {
        iter7 = this.groups[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sensor !== null && this.sensor !== undefined) {
    output.writeFieldBegin('sensor', Thrift.Type.STRUCT, 5);
    this.sensor.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.origin !== null && this.origin !== undefined) {
    output.writeFieldBegin('origin', Thrift.Type.STRUCT, 7);
    this.origin.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_Switch = function(args) {
  this.id = null;
  this.name = null;
  this.modules = null;
  this.scenes = null;
  this.groups = null;
  this.message = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.modules !== undefined) {
      this.modules = args.modules;
    }
    if (args.scenes !== undefined) {
      this.scenes = args.scenes;
    }
    if (args.groups !== undefined) {
      this.groups = args.groups;
    }
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
stLBN_Switch.prototype = {};
stLBN_Switch.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.modules = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new stLBN_Module();
          elem14.read(input);
          this.modules.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.scenes = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new stLBN_Scene();
          elem21.read(input);
          this.scenes.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size22 = 0;
        var _rtmp326;
        this.groups = [];
        var _etype25 = 0;
        _rtmp326 = input.readListBegin();
        _etype25 = _rtmp326.etype;
        _size22 = _rtmp326.size;
        for (var _i27 = 0; _i27 < _size22; ++_i27)
        {
          var elem28 = null;
          elem28 = new stLBN_Group();
          elem28.read(input);
          this.groups.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_Switch.prototype.write = function(output) {
  output.writeStructBegin('stLBN_Switch');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.modules !== null && this.modules !== undefined) {
    output.writeFieldBegin('modules', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.modules.length);
    for (var iter29 in this.modules)
    {
      if (this.modules.hasOwnProperty(iter29))
      {
        iter29 = this.modules[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scenes !== null && this.scenes !== undefined) {
    output.writeFieldBegin('scenes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.scenes.length);
    for (var iter30 in this.scenes)
    {
      if (this.scenes.hasOwnProperty(iter30))
      {
        iter30 = this.scenes[iter30];
        iter30.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter31 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter31))
      {
        iter31 = this.groups[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 6);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_Floor = function(args) {
  this.id = null;
  this.name = null;
  this.modules = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.modules !== undefined) {
      this.modules = args.modules;
    }
  }
};
stLBN_Floor.prototype = {};
stLBN_Floor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.modules = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new stLBN_Module();
          elem38.read(input);
          this.modules.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_Floor.prototype.write = function(output) {
  output.writeStructBegin('stLBN_Floor');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.modules !== null && this.modules !== undefined) {
    output.writeFieldBegin('modules', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.modules.length);
    for (var iter39 in this.modules)
    {
      if (this.modules.hasOwnProperty(iter39))
      {
        iter39 = this.modules[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_Area = function(args) {
  this.id = null;
  this.name = null;
  this.floors = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.floors !== undefined) {
      this.floors = args.floors;
    }
  }
};
stLBN_Area.prototype = {};
stLBN_Area.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.floors = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new stLBN_Floor();
          elem46.read(input);
          this.floors.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_Area.prototype.write = function(output) {
  output.writeStructBegin('stLBN_Area');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.floors !== null && this.floors !== undefined) {
    output.writeFieldBegin('floors', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.floors.length);
    for (var iter47 in this.floors)
    {
      if (this.floors.hasOwnProperty(iter47))
      {
        iter47 = this.floors[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_DisasterInfo = function(args) {
  this.date = null;
  this.description = null;
  if (args) {
    if (args.date !== undefined) {
      this.date = args.date;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
  }
};
stLBN_DisasterInfo.prototype = {};
stLBN_DisasterInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_DisasterInfo.prototype.write = function(output) {
  output.writeStructBegin('stLBN_DisasterInfo');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 1);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_PowerMeter = function(args) {
  this.hour = null;
  this.minute = null;
  this.second = null;
  this.dVoltage = null;
  this.dCurrent = null;
  this.dPower = null;
  if (args) {
    if (args.hour !== undefined) {
      this.hour = args.hour;
    }
    if (args.minute !== undefined) {
      this.minute = args.minute;
    }
    if (args.second !== undefined) {
      this.second = args.second;
    }
    if (args.dVoltage !== undefined) {
      this.dVoltage = args.dVoltage;
    }
    if (args.dCurrent !== undefined) {
      this.dCurrent = args.dCurrent;
    }
    if (args.dPower !== undefined) {
      this.dPower = args.dPower;
    }
  }
};
stLBN_PowerMeter.prototype = {};
stLBN_PowerMeter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.hour = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.minute = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.second = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dVoltage = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dCurrent = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.dPower = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_PowerMeter.prototype.write = function(output) {
  output.writeStructBegin('stLBN_PowerMeter');
  if (this.hour !== null && this.hour !== undefined) {
    output.writeFieldBegin('hour', Thrift.Type.I32, 1);
    output.writeI32(this.hour);
    output.writeFieldEnd();
  }
  if (this.minute !== null && this.minute !== undefined) {
    output.writeFieldBegin('minute', Thrift.Type.I32, 2);
    output.writeI32(this.minute);
    output.writeFieldEnd();
  }
  if (this.second !== null && this.second !== undefined) {
    output.writeFieldBegin('second', Thrift.Type.I32, 3);
    output.writeI32(this.second);
    output.writeFieldEnd();
  }
  if (this.dVoltage !== null && this.dVoltage !== undefined) {
    output.writeFieldBegin('dVoltage', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.dVoltage);
    output.writeFieldEnd();
  }
  if (this.dCurrent !== null && this.dCurrent !== undefined) {
    output.writeFieldBegin('dCurrent', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.dCurrent);
    output.writeFieldEnd();
  }
  if (this.dPower !== null && this.dPower !== undefined) {
    output.writeFieldBegin('dPower', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.dPower);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_PowerMeterOneDay = function(args) {
  this.year = null;
  this.month = null;
  this.day = null;
  this.powermeters = null;
  if (args) {
    if (args.year !== undefined) {
      this.year = args.year;
    }
    if (args.month !== undefined) {
      this.month = args.month;
    }
    if (args.day !== undefined) {
      this.day = args.day;
    }
    if (args.powermeters !== undefined) {
      this.powermeters = args.powermeters;
    }
  }
};
stLBN_PowerMeterOneDay.prototype = {};
stLBN_PowerMeterOneDay.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.year = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.month = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.day = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.powermeters = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new stLBN_PowerMeter();
          elem54.read(input);
          this.powermeters.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_PowerMeterOneDay.prototype.write = function(output) {
  output.writeStructBegin('stLBN_PowerMeterOneDay');
  if (this.year !== null && this.year !== undefined) {
    output.writeFieldBegin('year', Thrift.Type.I32, 1);
    output.writeI32(this.year);
    output.writeFieldEnd();
  }
  if (this.month !== null && this.month !== undefined) {
    output.writeFieldBegin('month', Thrift.Type.I32, 2);
    output.writeI32(this.month);
    output.writeFieldEnd();
  }
  if (this.day !== null && this.day !== undefined) {
    output.writeFieldBegin('day', Thrift.Type.I32, 3);
    output.writeI32(this.day);
    output.writeFieldEnd();
  }
  if (this.powermeters !== null && this.powermeters !== undefined) {
    output.writeFieldBegin('powermeters', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.powermeters.length);
    for (var iter55 in this.powermeters)
    {
      if (this.powermeters.hasOwnProperty(iter55))
      {
        iter55 = this.powermeters[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_Schedule = function(args) {
  this.id = null;
  this.time = null;
  this.scene = null;
  this.repeatAll = null;
  this.repeatDays = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.time !== undefined) {
      this.time = args.time;
    }
    if (args.scene !== undefined) {
      this.scene = args.scene;
    }
    if (args.repeatAll !== undefined) {
      this.repeatAll = args.repeatAll;
    }
    if (args.repeatDays !== undefined) {
      this.repeatDays = args.repeatDays;
    }
  }
};
stLBN_Schedule.prototype = {};
stLBN_Schedule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scene = new stLBN_Scene();
        this.scene.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.repeatAll = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.repeatDays = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readBool().value;
          this.repeatDays.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_Schedule.prototype.write = function(output) {
  output.writeStructBegin('stLBN_Schedule');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 2);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.scene !== null && this.scene !== undefined) {
    output.writeFieldBegin('scene', Thrift.Type.STRUCT, 3);
    this.scene.write(output);
    output.writeFieldEnd();
  }
  if (this.repeatAll !== null && this.repeatAll !== undefined) {
    output.writeFieldBegin('repeatAll', Thrift.Type.BOOL, 4);
    output.writeBool(this.repeatAll);
    output.writeFieldEnd();
  }
  if (this.repeatDays !== null && this.repeatDays !== undefined) {
    output.writeFieldBegin('repeatDays', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.BOOL, this.repeatDays.length);
    for (var iter63 in this.repeatDays)
    {
      if (this.repeatDays.hasOwnProperty(iter63))
      {
        iter63 = this.repeatDays[iter63];
        output.writeBool(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_ContextRule = function(args) {
  this.id = null;
  this.title = null;
  this.description = null;
  this.scene = null;
  this.hasScene = null;
  this.enabled = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.scene !== undefined) {
      this.scene = args.scene;
    }
    if (args.hasScene !== undefined) {
      this.hasScene = args.hasScene;
    }
    if (args.enabled !== undefined) {
      this.enabled = args.enabled;
    }
  }
};
stLBN_ContextRule.prototype = {};
stLBN_ContextRule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.scene = new stLBN_Scene();
        this.scene.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.hasScene = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.enabled = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_ContextRule.prototype.write = function(output) {
  output.writeStructBegin('stLBN_ContextRule');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.scene !== null && this.scene !== undefined) {
    output.writeFieldBegin('scene', Thrift.Type.STRUCT, 4);
    this.scene.write(output);
    output.writeFieldEnd();
  }
  if (this.hasScene !== null && this.hasScene !== undefined) {
    output.writeFieldBegin('hasScene', Thrift.Type.BOOL, 5);
    output.writeBool(this.hasScene);
    output.writeFieldEnd();
  }
  if (this.enabled !== null && this.enabled !== undefined) {
    output.writeFieldBegin('enabled', Thrift.Type.BOOL, 6);
    output.writeBool(this.enabled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_SolarInfo = function(args) {
  this.currentTime = null;
  this.latitude = null;
  this.longitude = null;
  this.azimuth = null;
  this.elevation = null;
  this.sunriseTime = null;
  this.suntransitTime = null;
  this.sunsetTime = null;
  if (args) {
    if (args.currentTime !== undefined) {
      this.currentTime = args.currentTime;
    }
    if (args.latitude !== undefined) {
      this.latitude = args.latitude;
    }
    if (args.longitude !== undefined) {
      this.longitude = args.longitude;
    }
    if (args.azimuth !== undefined) {
      this.azimuth = args.azimuth;
    }
    if (args.elevation !== undefined) {
      this.elevation = args.elevation;
    }
    if (args.sunriseTime !== undefined) {
      this.sunriseTime = args.sunriseTime;
    }
    if (args.suntransitTime !== undefined) {
      this.suntransitTime = args.suntransitTime;
    }
    if (args.sunsetTime !== undefined) {
      this.sunsetTime = args.sunsetTime;
    }
  }
};
stLBN_SolarInfo.prototype = {};
stLBN_SolarInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.currentTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.latitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.longitude = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.azimuth = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.elevation = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.sunriseTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.suntransitTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.sunsetTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_SolarInfo.prototype.write = function(output) {
  output.writeStructBegin('stLBN_SolarInfo');
  if (this.currentTime !== null && this.currentTime !== undefined) {
    output.writeFieldBegin('currentTime', Thrift.Type.I64, 1);
    output.writeI64(this.currentTime);
    output.writeFieldEnd();
  }
  if (this.latitude !== null && this.latitude !== undefined) {
    output.writeFieldBegin('latitude', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.latitude);
    output.writeFieldEnd();
  }
  if (this.longitude !== null && this.longitude !== undefined) {
    output.writeFieldBegin('longitude', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.longitude);
    output.writeFieldEnd();
  }
  if (this.azimuth !== null && this.azimuth !== undefined) {
    output.writeFieldBegin('azimuth', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.azimuth);
    output.writeFieldEnd();
  }
  if (this.elevation !== null && this.elevation !== undefined) {
    output.writeFieldBegin('elevation', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.elevation);
    output.writeFieldEnd();
  }
  if (this.sunriseTime !== null && this.sunriseTime !== undefined) {
    output.writeFieldBegin('sunriseTime', Thrift.Type.I64, 6);
    output.writeI64(this.sunriseTime);
    output.writeFieldEnd();
  }
  if (this.suntransitTime !== null && this.suntransitTime !== undefined) {
    output.writeFieldBegin('suntransitTime', Thrift.Type.I64, 7);
    output.writeI64(this.suntransitTime);
    output.writeFieldEnd();
  }
  if (this.sunsetTime !== null && this.sunsetTime !== undefined) {
    output.writeFieldBegin('sunsetTime', Thrift.Type.I64, 8);
    output.writeI64(this.sunsetTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_GraphData = function(args) {
  this.title = null;
  this.values = null;
  if (args) {
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.values !== undefined) {
      this.values = args.values;
    }
  }
};
stLBN_GraphData.prototype = {};
stLBN_GraphData.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.values = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readDouble().value;
          this.values.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_GraphData.prototype.write = function(output) {
  output.writeStructBegin('stLBN_GraphData');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.values !== null && this.values !== undefined) {
    output.writeFieldBegin('values', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.values.length);
    for (var iter71 in this.values)
    {
      if (this.values.hasOwnProperty(iter71))
      {
        iter71 = this.values[iter71];
        output.writeDouble(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_Chart = function(args) {
  this.title = null;
  this.data = null;
  this.xLabels = null;
  if (args) {
    if (args.title !== undefined) {
      this.title = args.title;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
    if (args.xLabels !== undefined) {
      this.xLabels = args.xLabels;
    }
  }
};
stLBN_Chart.prototype = {};
stLBN_Chart.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.data = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new stLBN_GraphData();
          elem78.read(input);
          this.data.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size79 = 0;
        var _rtmp383;
        this.xLabels = [];
        var _etype82 = 0;
        _rtmp383 = input.readListBegin();
        _etype82 = _rtmp383.etype;
        _size79 = _rtmp383.size;
        for (var _i84 = 0; _i84 < _size79; ++_i84)
        {
          var elem85 = null;
          elem85 = input.readString().value;
          this.xLabels.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_Chart.prototype.write = function(output) {
  output.writeStructBegin('stLBN_Chart');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter86 in this.data)
    {
      if (this.data.hasOwnProperty(iter86))
      {
        iter86 = this.data[iter86];
        iter86.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.xLabels !== null && this.xLabels !== undefined) {
    output.writeFieldBegin('xLabels', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.xLabels.length);
    for (var iter87 in this.xLabels)
    {
      if (this.xLabels.hasOwnProperty(iter87))
      {
        iter87 = this.xLabels[iter87];
        output.writeString(iter87);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_ParkingSensor = function(args) {
  this.floor = null;
  this.zone = null;
  this.slot = null;
  this.value = null;
  if (args) {
    if (args.floor !== undefined) {
      this.floor = args.floor;
    }
    if (args.zone !== undefined) {
      this.zone = args.zone;
    }
    if (args.slot !== undefined) {
      this.slot = args.slot;
    }
    if (args.value !== undefined) {
      this.value = args.value;
    }
  }
};
stLBN_ParkingSensor.prototype = {};
stLBN_ParkingSensor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.floor = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BYTE) {
        this.zone = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.slot = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.value = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_ParkingSensor.prototype.write = function(output) {
  output.writeStructBegin('stLBN_ParkingSensor');
  if (this.floor !== null && this.floor !== undefined) {
    output.writeFieldBegin('floor', Thrift.Type.BYTE, 1);
    output.writeByte(this.floor);
    output.writeFieldEnd();
  }
  if (this.zone !== null && this.zone !== undefined) {
    output.writeFieldBegin('zone', Thrift.Type.BYTE, 2);
    output.writeByte(this.zone);
    output.writeFieldEnd();
  }
  if (this.slot !== null && this.slot !== undefined) {
    output.writeFieldBegin('slot', Thrift.Type.BYTE, 3);
    output.writeByte(this.slot);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.BYTE, 4);
    output.writeByte(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

stLBN_SchedulePreset = function(args) {
  this.id = null;
  this.title = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.title !== undefined) {
      this.title = args.title;
    }
  }
};
stLBN_SchedulePreset.prototype = {};
stLBN_SchedulePreset.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stLBN_SchedulePreset.prototype.write = function(output) {
  output.writeStructBegin('stLBN_SchedulePreset');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

